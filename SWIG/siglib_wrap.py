# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _siglib_wrap
else:
    import _siglib_wrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _siglib_wrap.doubleArray_swiginit(self, _siglib_wrap.new_doubleArray(nelements))
    __swig_destroy__ = _siglib_wrap.delete_doubleArray

    def __getitem__(self, index):
        return _siglib_wrap.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _siglib_wrap.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _siglib_wrap.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _siglib_wrap.doubleArray_frompointer(t)

# Register doubleArray in _siglib_wrap:
_siglib_wrap.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _siglib_wrap.doubleArray_frompointer(t)

class longArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _siglib_wrap.longArray_swiginit(self, _siglib_wrap.new_longArray(nelements))
    __swig_destroy__ = _siglib_wrap.delete_longArray

    def __getitem__(self, index):
        return _siglib_wrap.longArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _siglib_wrap.longArray___setitem__(self, index, value)

    def cast(self):
        return _siglib_wrap.longArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _siglib_wrap.longArray_frompointer(t)

# Register longArray in _siglib_wrap:
_siglib_wrap.longArray_swigregister(longArray)

def longArray_frompointer(t):
    return _siglib_wrap.longArray_frompointer(t)

SIGLIB = _siglib_wrap.SIGLIB
SIGLIB_VERSION = _siglib_wrap.SIGLIB_VERSION
SIGLIB_ENABLE_DEBUG_LOGGING = _siglib_wrap.SIGLIB_ENABLE_DEBUG_LOGGING
SIGLIB_LOG_FILE = _siglib_wrap.SIGLIB_LOG_FILE
SIGLIB_MINUS_ONE_HUNDRED = _siglib_wrap.SIGLIB_MINUS_ONE_HUNDRED
SIGLIB_MINUS_TEN = _siglib_wrap.SIGLIB_MINUS_TEN
SIGLIB_MINUS_TWO = _siglib_wrap.SIGLIB_MINUS_TWO
SIGLIB_MINUS_ONE = _siglib_wrap.SIGLIB_MINUS_ONE
SIGLIB_MINUS_HALF = _siglib_wrap.SIGLIB_MINUS_HALF
SIGLIB_ZERO = _siglib_wrap.SIGLIB_ZERO
SIGLIB_QUARTER = _siglib_wrap.SIGLIB_QUARTER
SIGLIB_THIRD = _siglib_wrap.SIGLIB_THIRD
SIGLIB_HALF = _siglib_wrap.SIGLIB_HALF
SIGLIB_ONE = _siglib_wrap.SIGLIB_ONE
SIGLIB_ONE_AND_HALF = _siglib_wrap.SIGLIB_ONE_AND_HALF
SIGLIB_TWO = _siglib_wrap.SIGLIB_TWO
SIGLIB_THREE = _siglib_wrap.SIGLIB_THREE
SIGLIB_FOUR = _siglib_wrap.SIGLIB_FOUR
SIGLIB_FIVE = _siglib_wrap.SIGLIB_FIVE
SIGLIB_SIX = _siglib_wrap.SIGLIB_SIX
SIGLIB_SEVEN = _siglib_wrap.SIGLIB_SEVEN
SIGLIB_EIGHT = _siglib_wrap.SIGLIB_EIGHT
SIGLIB_NINE = _siglib_wrap.SIGLIB_NINE
SIGLIB_TEN = _siglib_wrap.SIGLIB_TEN
SIGLIB_SIXTEEN = _siglib_wrap.SIGLIB_SIXTEEN
SIGLIB_TWENTY = _siglib_wrap.SIGLIB_TWENTY
SIGLIB_FIFTY = _siglib_wrap.SIGLIB_FIFTY
SIGLIB_SIXTY_FOUR = _siglib_wrap.SIGLIB_SIXTY_FOUR
SIGLIB_ONE_HUNDRED = _siglib_wrap.SIGLIB_ONE_HUNDRED
SIGLIB_TWO_HUNDRED = _siglib_wrap.SIGLIB_TWO_HUNDRED
SIGLIB_THREE_SIXTY = _siglib_wrap.SIGLIB_THREE_SIXTY
SIGLIB_PI = _siglib_wrap.SIGLIB_PI
SIGLIB_TWO_PI = _siglib_wrap.SIGLIB_TWO_PI
SIGLIB_HALF_PI = _siglib_wrap.SIGLIB_HALF_PI
SIGLIB_QUARTER_PI = _siglib_wrap.SIGLIB_QUARTER_PI
SIGLIB_FOUR_PI = _siglib_wrap.SIGLIB_FOUR_PI
SIGLIB_INV_PI = _siglib_wrap.SIGLIB_INV_PI
SIGLIB_INV_TWO_PI = _siglib_wrap.SIGLIB_INV_TWO_PI
SIGLIB_SQRT_PI = _siglib_wrap.SIGLIB_SQRT_PI
SIGLIB_PI_SQUARED = _siglib_wrap.SIGLIB_PI_SQUARED
SIGLIB_INV_EIGHT = _siglib_wrap.SIGLIB_INV_EIGHT
SIGLIB_INV_SIXTEEN = _siglib_wrap.SIGLIB_INV_SIXTEEN
SIGLIB_SQRT_TWO = _siglib_wrap.SIGLIB_SQRT_TWO
SIGLIB_INV_SQRT_TWO = _siglib_wrap.SIGLIB_INV_SQRT_TWO
SIGLIB_SQRT_TWO_DIV_TWO = _siglib_wrap.SIGLIB_SQRT_TWO_DIV_TWO
SIGLIB_INV_SQRT_TWO_PI = _siglib_wrap.SIGLIB_INV_SQRT_TWO_PI
SIGLIB_SQRT_HALF_LN2 = _siglib_wrap.SIGLIB_SQRT_HALF_LN2
SIGLIB_LN2 = _siglib_wrap.SIGLIB_LN2
SIGLIB_THREE_SIXTY_OVER_TWO_PI = _siglib_wrap.SIGLIB_THREE_SIXTY_OVER_TWO_PI
SIGLIB_TWO_PI_OVER_THREE_SIXTY = _siglib_wrap.SIGLIB_TWO_PI_OVER_THREE_SIXTY
SIGLIB_LOG10_OF_2 = _siglib_wrap.SIGLIB_LOG10_OF_2
SIGLIB_INV_LOG10_OF_2 = _siglib_wrap.SIGLIB_INV_LOG10_OF_2
SIGLIB_INV_LOG10_OF_4 = _siglib_wrap.SIGLIB_INV_LOG10_OF_4
SIGLIB_DEGREES_TO_RADIANS = _siglib_wrap.SIGLIB_DEGREES_TO_RADIANS
SIGLIB_RADIANS_TO_DEGREES = _siglib_wrap.SIGLIB_RADIANS_TO_DEGREES
SIGLIB_EXP_MINUS_ONE = _siglib_wrap.SIGLIB_EXP_MINUS_ONE
SIGLIB_SQRT_THREE = _siglib_wrap.SIGLIB_SQRT_THREE
SIGLIB_HALF_SQRT_THREE = _siglib_wrap.SIGLIB_HALF_SQRT_THREE
SIGLIB_FIX_DATA_SHORT = _siglib_wrap.SIGLIB_FIX_DATA_SHORT
SIGLIB_DATA_SHORT = _siglib_wrap.SIGLIB_DATA_SHORT
SIGLIB_DATA_LONG = _siglib_wrap.SIGLIB_DATA_LONG
SIGLIB_DATA_FLOAT = _siglib_wrap.SIGLIB_DATA_FLOAT
SIGLIB_INDEX_SHORT = _siglib_wrap.SIGLIB_INDEX_SHORT
SIGLIB_INDEX_INT = _siglib_wrap.SIGLIB_INDEX_INT
SIGLIB_ARRAYS_ALIGNED = _siglib_wrap.SIGLIB_ARRAYS_ALIGNED
SIGLIB_FILE_IO_SUPPORTED = _siglib_wrap.SIGLIB_FILE_IO_SUPPORTED
SIGLIB_CONSOLE_IO_SUPPORTED = _siglib_wrap.SIGLIB_CONSOLE_IO_SUPPORTED
RAND_MAX = _siglib_wrap.RAND_MAX
class SLComplexRect_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    real = property(_siglib_wrap.SLComplexRect_s_real_get, _siglib_wrap.SLComplexRect_s_real_set)
    imag = property(_siglib_wrap.SLComplexRect_s_imag_get, _siglib_wrap.SLComplexRect_s_imag_set)

    def __init__(self):
        _siglib_wrap.SLComplexRect_s_swiginit(self, _siglib_wrap.new_SLComplexRect_s())
    __swig_destroy__ = _siglib_wrap.delete_SLComplexRect_s

# Register SLComplexRect_s in _siglib_wrap:
_siglib_wrap.SLComplexRect_s_swigregister(SLComplexRect_s)

class SLComplexPolar_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magn = property(_siglib_wrap.SLComplexPolar_s_magn_get, _siglib_wrap.SLComplexPolar_s_magn_set)
    angle = property(_siglib_wrap.SLComplexPolar_s_angle_get, _siglib_wrap.SLComplexPolar_s_angle_set)

    def __init__(self):
        _siglib_wrap.SLComplexPolar_s_swiginit(self, _siglib_wrap.new_SLComplexPolar_s())
    __swig_destroy__ = _siglib_wrap.delete_SLComplexPolar_s

# Register SLComplexPolar_s in _siglib_wrap:
_siglib_wrap.SLComplexPolar_s_swigregister(SLComplexPolar_s)

class SLComplexRect16_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    real = property(_siglib_wrap.SLComplexRect16_s_real_get, _siglib_wrap.SLComplexRect16_s_real_set)
    imag = property(_siglib_wrap.SLComplexRect16_s_imag_get, _siglib_wrap.SLComplexRect16_s_imag_set)

    def __init__(self):
        _siglib_wrap.SLComplexRect16_s_swiginit(self, _siglib_wrap.new_SLComplexRect16_s())
    __swig_destroy__ = _siglib_wrap.delete_SLComplexRect16_s

# Register SLComplexRect16_s in _siglib_wrap:
_siglib_wrap.SLComplexRect16_s_swigregister(SLComplexRect16_s)

class SLComplexPolar16_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magn = property(_siglib_wrap.SLComplexPolar16_s_magn_get, _siglib_wrap.SLComplexPolar16_s_magn_set)
    angle = property(_siglib_wrap.SLComplexPolar16_s_angle_get, _siglib_wrap.SLComplexPolar16_s_angle_set)

    def __init__(self):
        _siglib_wrap.SLComplexPolar16_s_swiginit(self, _siglib_wrap.new_SLComplexPolar16_s())
    __swig_destroy__ = _siglib_wrap.delete_SLComplexPolar16_s

# Register SLComplexPolar16_s in _siglib_wrap:
_siglib_wrap.SLComplexPolar16_s_swigregister(SLComplexPolar16_s)

class SLComplexRect32_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    real = property(_siglib_wrap.SLComplexRect32_s_real_get, _siglib_wrap.SLComplexRect32_s_real_set)
    imag = property(_siglib_wrap.SLComplexRect32_s_imag_get, _siglib_wrap.SLComplexRect32_s_imag_set)

    def __init__(self):
        _siglib_wrap.SLComplexRect32_s_swiginit(self, _siglib_wrap.new_SLComplexRect32_s())
    __swig_destroy__ = _siglib_wrap.delete_SLComplexRect32_s

# Register SLComplexRect32_s in _siglib_wrap:
_siglib_wrap.SLComplexRect32_s_swigregister(SLComplexRect32_s)

class SLComplexPolar32_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magn = property(_siglib_wrap.SLComplexPolar32_s_magn_get, _siglib_wrap.SLComplexPolar32_s_magn_set)
    angle = property(_siglib_wrap.SLComplexPolar32_s_angle_get, _siglib_wrap.SLComplexPolar32_s_angle_set)

    def __init__(self):
        _siglib_wrap.SLComplexPolar32_s_swiginit(self, _siglib_wrap.new_SLComplexPolar32_s())
    __swig_destroy__ = _siglib_wrap.delete_SLComplexPolar32_s

# Register SLComplexPolar32_s in _siglib_wrap:
_siglib_wrap.SLComplexPolar32_s_swigregister(SLComplexPolar32_s)

class SLMicrophone_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xPos = property(_siglib_wrap.SLMicrophone_s_xPos_get, _siglib_wrap.SLMicrophone_s_xPos_set)
    yPos = property(_siglib_wrap.SLMicrophone_s_yPos_get, _siglib_wrap.SLMicrophone_s_yPos_set)
    delay = property(_siglib_wrap.SLMicrophone_s_delay_get, _siglib_wrap.SLMicrophone_s_delay_set)
    gain = property(_siglib_wrap.SLMicrophone_s_gain_get, _siglib_wrap.SLMicrophone_s_gain_set)

    def __init__(self):
        _siglib_wrap.SLMicrophone_s_swiginit(self, _siglib_wrap.new_SLMicrophone_s())
    __swig_destroy__ = _siglib_wrap.delete_SLMicrophone_s

# Register SLMicrophone_s in _siglib_wrap:
_siglib_wrap.SLMicrophone_s_swigregister(SLMicrophone_s)

class SLMicrophone16_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xPos = property(_siglib_wrap.SLMicrophone16_s_xPos_get, _siglib_wrap.SLMicrophone16_s_xPos_set)
    yPos = property(_siglib_wrap.SLMicrophone16_s_yPos_get, _siglib_wrap.SLMicrophone16_s_yPos_set)
    delay = property(_siglib_wrap.SLMicrophone16_s_delay_get, _siglib_wrap.SLMicrophone16_s_delay_set)
    gain = property(_siglib_wrap.SLMicrophone16_s_gain_get, _siglib_wrap.SLMicrophone16_s_gain_set)

    def __init__(self):
        _siglib_wrap.SLMicrophone16_s_swiginit(self, _siglib_wrap.new_SLMicrophone16_s())
    __swig_destroy__ = _siglib_wrap.delete_SLMicrophone16_s

# Register SLMicrophone16_s in _siglib_wrap:
_siglib_wrap.SLMicrophone16_s_swigregister(SLMicrophone16_s)

class SLMicrophone32_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xPos = property(_siglib_wrap.SLMicrophone32_s_xPos_get, _siglib_wrap.SLMicrophone32_s_xPos_set)
    yPos = property(_siglib_wrap.SLMicrophone32_s_yPos_get, _siglib_wrap.SLMicrophone32_s_yPos_set)
    delay = property(_siglib_wrap.SLMicrophone32_s_delay_get, _siglib_wrap.SLMicrophone32_s_delay_set)
    gain = property(_siglib_wrap.SLMicrophone32_s_gain_get, _siglib_wrap.SLMicrophone32_s_gain_set)

    def __init__(self):
        _siglib_wrap.SLMicrophone32_s_swiginit(self, _siglib_wrap.new_SLMicrophone32_s())
    __swig_destroy__ = _siglib_wrap.delete_SLMicrophone32_s

# Register SLMicrophone32_s in _siglib_wrap:
_siglib_wrap.SLMicrophone32_s_swigregister(SLMicrophone32_s)

class SLWavFileInfo_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SampleRate = property(_siglib_wrap.SLWavFileInfo_s_SampleRate_get, _siglib_wrap.SLWavFileInfo_s_SampleRate_set)
    NumberOfSamples = property(_siglib_wrap.SLWavFileInfo_s_NumberOfSamples_get, _siglib_wrap.SLWavFileInfo_s_NumberOfSamples_set)
    NumberOfChannels = property(_siglib_wrap.SLWavFileInfo_s_NumberOfChannels_get, _siglib_wrap.SLWavFileInfo_s_NumberOfChannels_set)
    WordLength = property(_siglib_wrap.SLWavFileInfo_s_WordLength_get, _siglib_wrap.SLWavFileInfo_s_WordLength_set)
    BytesPerSample = property(_siglib_wrap.SLWavFileInfo_s_BytesPerSample_get, _siglib_wrap.SLWavFileInfo_s_BytesPerSample_set)
    DataFormat = property(_siglib_wrap.SLWavFileInfo_s_DataFormat_get, _siglib_wrap.SLWavFileInfo_s_DataFormat_set)

    def __init__(self):
        _siglib_wrap.SLWavFileInfo_s_swiginit(self, _siglib_wrap.new_SLWavFileInfo_s())
    __swig_destroy__ = _siglib_wrap.delete_SLWavFileInfo_s

# Register SLWavFileInfo_s in _siglib_wrap:
_siglib_wrap.SLWavFileInfo_s_swigregister(SLWavFileInfo_s)

class SLNeuralNetworkPrediction_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    predictedCategory = property(_siglib_wrap.SLNeuralNetworkPrediction_s_predictedCategory_get, _siglib_wrap.SLNeuralNetworkPrediction_s_predictedCategory_set)
    probability = property(_siglib_wrap.SLNeuralNetworkPrediction_s_probability_get, _siglib_wrap.SLNeuralNetworkPrediction_s_probability_set)

    def __init__(self):
        _siglib_wrap.SLNeuralNetworkPrediction_s_swiginit(self, _siglib_wrap.new_SLNeuralNetworkPrediction_s())
    __swig_destroy__ = _siglib_wrap.delete_SLNeuralNetworkPrediction_s

# Register SLNeuralNetworkPrediction_s in _siglib_wrap:
_siglib_wrap.SLNeuralNetworkPrediction_s_swigregister(SLNeuralNetworkPrediction_s)

class SLDrcLevelGainTable_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    level = property(_siglib_wrap.SLDrcLevelGainTable_s_level_get, _siglib_wrap.SLDrcLevelGainTable_s_level_set)
    gain = property(_siglib_wrap.SLDrcLevelGainTable_s_gain_get, _siglib_wrap.SLDrcLevelGainTable_s_gain_set)

    def __init__(self):
        _siglib_wrap.SLDrcLevelGainTable_s_swiginit(self, _siglib_wrap.new_SLDrcLevelGainTable_s())
    __swig_destroy__ = _siglib_wrap.delete_SLDrcLevelGainTable_s

# Register SLDrcLevelGainTable_s in _siglib_wrap:
_siglib_wrap.SLDrcLevelGainTable_s_swigregister(SLDrcLevelGainTable_s)

class SLKalmanFilter1D_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_siglib_wrap.SLKalmanFilter1D_s_A_get, _siglib_wrap.SLKalmanFilter1D_s_A_set)
    B = property(_siglib_wrap.SLKalmanFilter1D_s_B_get, _siglib_wrap.SLKalmanFilter1D_s_B_set)
    u = property(_siglib_wrap.SLKalmanFilter1D_s_u_get, _siglib_wrap.SLKalmanFilter1D_s_u_set)
    w = property(_siglib_wrap.SLKalmanFilter1D_s_w_get, _siglib_wrap.SLKalmanFilter1D_s_w_set)
    H = property(_siglib_wrap.SLKalmanFilter1D_s_H_get, _siglib_wrap.SLKalmanFilter1D_s_H_set)
    P = property(_siglib_wrap.SLKalmanFilter1D_s_P_get, _siglib_wrap.SLKalmanFilter1D_s_P_set)
    Q = property(_siglib_wrap.SLKalmanFilter1D_s_Q_get, _siglib_wrap.SLKalmanFilter1D_s_Q_set)
    R = property(_siglib_wrap.SLKalmanFilter1D_s_R_get, _siglib_wrap.SLKalmanFilter1D_s_R_set)
    X = property(_siglib_wrap.SLKalmanFilter1D_s_X_get, _siglib_wrap.SLKalmanFilter1D_s_X_set)

    def __init__(self):
        _siglib_wrap.SLKalmanFilter1D_s_swiginit(self, _siglib_wrap.new_SLKalmanFilter1D_s())
    __swig_destroy__ = _siglib_wrap.delete_SLKalmanFilter1D_s

# Register SLKalmanFilter1D_s in _siglib_wrap:
_siglib_wrap.SLKalmanFilter1D_s_swigregister(SLKalmanFilter1D_s)

class SLKalmanFilter2D_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_siglib_wrap.SLKalmanFilter2D_s_A_get, _siglib_wrap.SLKalmanFilter2D_s_A_set)
    B = property(_siglib_wrap.SLKalmanFilter2D_s_B_get, _siglib_wrap.SLKalmanFilter2D_s_B_set)
    u = property(_siglib_wrap.SLKalmanFilter2D_s_u_get, _siglib_wrap.SLKalmanFilter2D_s_u_set)
    w = property(_siglib_wrap.SLKalmanFilter2D_s_w_get, _siglib_wrap.SLKalmanFilter2D_s_w_set)
    H = property(_siglib_wrap.SLKalmanFilter2D_s_H_get, _siglib_wrap.SLKalmanFilter2D_s_H_set)
    P = property(_siglib_wrap.SLKalmanFilter2D_s_P_get, _siglib_wrap.SLKalmanFilter2D_s_P_set)
    Q = property(_siglib_wrap.SLKalmanFilter2D_s_Q_get, _siglib_wrap.SLKalmanFilter2D_s_Q_set)
    R = property(_siglib_wrap.SLKalmanFilter2D_s_R_get, _siglib_wrap.SLKalmanFilter2D_s_R_set)
    X = property(_siglib_wrap.SLKalmanFilter2D_s_X_get, _siglib_wrap.SLKalmanFilter2D_s_X_set)

    def __init__(self):
        _siglib_wrap.SLKalmanFilter2D_s_swiginit(self, _siglib_wrap.new_SLKalmanFilter2D_s())
    __swig_destroy__ = _siglib_wrap.delete_SLKalmanFilter2D_s

# Register SLKalmanFilter2D_s in _siglib_wrap:
_siglib_wrap.SLKalmanFilter2D_s_swigregister(SLKalmanFilter2D_s)

SIGLIB_HANNING = _siglib_wrap.SIGLIB_HANNING
SIGLIB_HAMMING = _siglib_wrap.SIGLIB_HAMMING
SIGLIB_GENERALIZED_COSINE = _siglib_wrap.SIGLIB_GENERALIZED_COSINE
SIGLIB_BLACKMAN = _siglib_wrap.SIGLIB_BLACKMAN
SIGLIB_BARTLETT_TRIANGLE_ZERO_END_POINTS = _siglib_wrap.SIGLIB_BARTLETT_TRIANGLE_ZERO_END_POINTS
SIGLIB_BARTLETT_TRIANGLE_NON_ZERO_END_POINTS = _siglib_wrap.SIGLIB_BARTLETT_TRIANGLE_NON_ZERO_END_POINTS
SIGLIB_KAISER = _siglib_wrap.SIGLIB_KAISER
SIGLIB_BLACKMAN_HARRIS = _siglib_wrap.SIGLIB_BLACKMAN_HARRIS
SIGLIB_RECTANGLE = _siglib_wrap.SIGLIB_RECTANGLE
SIGLIB_FLAT_TOP = _siglib_wrap.SIGLIB_FLAT_TOP
SIGLIB_SINE_WAVE = _siglib_wrap.SIGLIB_SINE_WAVE
SIGLIB_COSINE_WAVE = _siglib_wrap.SIGLIB_COSINE_WAVE
SIGLIB_WHITE_NOISE = _siglib_wrap.SIGLIB_WHITE_NOISE
SIGLIB_GAUSSIAN_NOISE = _siglib_wrap.SIGLIB_GAUSSIAN_NOISE
SIGLIB_CHIRP_LIN = _siglib_wrap.SIGLIB_CHIRP_LIN
SIGLIB_CHIRP_NL = _siglib_wrap.SIGLIB_CHIRP_NL
SIGLIB_SQUARE_WAVE = _siglib_wrap.SIGLIB_SQUARE_WAVE
SIGLIB_TRIANGLE_WAVE = _siglib_wrap.SIGLIB_TRIANGLE_WAVE
SIGLIB_IMPULSE = _siglib_wrap.SIGLIB_IMPULSE
SIGLIB_IMPULSE_STREAM = _siglib_wrap.SIGLIB_IMPULSE_STREAM
SIGLIB_STEP = _siglib_wrap.SIGLIB_STEP
SIGLIB_PN_SEQUENCE = _siglib_wrap.SIGLIB_PN_SEQUENCE
SIGLIB_DC_LEVEL = _siglib_wrap.SIGLIB_DC_LEVEL
SIGLIB_FILL = _siglib_wrap.SIGLIB_FILL
SIGLIB_ADD = _siglib_wrap.SIGLIB_ADD
SIGLIB_SIGNED_DATA = _siglib_wrap.SIGLIB_SIGNED_DATA
SIGLIB_UNSIGNED_DATA = _siglib_wrap.SIGLIB_UNSIGNED_DATA
SIGLIB_ECHO = _siglib_wrap.SIGLIB_ECHO
SIGLIB_REVERB = _siglib_wrap.SIGLIB_REVERB
SIGLIB_ROUND_UP = _siglib_wrap.SIGLIB_ROUND_UP
SIGLIB_ROUND_TO_NEAREST = _siglib_wrap.SIGLIB_ROUND_TO_NEAREST
SIGLIB_ROUND_DOWN = _siglib_wrap.SIGLIB_ROUND_DOWN
SIGLIB_ROUND_TO_ZERO = _siglib_wrap.SIGLIB_ROUND_TO_ZERO
SIGLIB_ROUND_AWAY_FROM_ZERO = _siglib_wrap.SIGLIB_ROUND_AWAY_FROM_ZERO
SIGLIB_SINGLE_SIDED_MODULO = _siglib_wrap.SIGLIB_SINGLE_SIDED_MODULO
SIGLIB_DOUBLE_SIDED_MODULO = _siglib_wrap.SIGLIB_DOUBLE_SIDED_MODULO
SIGLIB_CLIP_ABOVE = _siglib_wrap.SIGLIB_CLIP_ABOVE
SIGLIB_CLIP_BOTH = _siglib_wrap.SIGLIB_CLIP_BOTH
SIGLIB_CLIP_BELOW = _siglib_wrap.SIGLIB_CLIP_BELOW
SIGLIB_CLIP_BOTH_BELOW = _siglib_wrap.SIGLIB_CLIP_BOTH_BELOW
SIGLIB_SINGLE_SIDED_THOLD = _siglib_wrap.SIGLIB_SINGLE_SIDED_THOLD
SIGLIB_DOUBLE_SIDED_THOLD = _siglib_wrap.SIGLIB_DOUBLE_SIDED_THOLD
SIGLIB_POSITIVE_LEVEL_CROSS = _siglib_wrap.SIGLIB_POSITIVE_LEVEL_CROSS
SIGLIB_NEGATIVE_LEVEL_CROSS = _siglib_wrap.SIGLIB_NEGATIVE_LEVEL_CROSS
SIGLIB_ALL_LEVEL_CROSS = _siglib_wrap.SIGLIB_ALL_LEVEL_CROSS
SIGLIB_ARB_FFT_DO_CZT = _siglib_wrap.SIGLIB_ARB_FFT_DO_CZT
SIGLIB_ARB_FFT_DO_FFT = _siglib_wrap.SIGLIB_ARB_FFT_DO_FFT
SIGLIB_NO_PARITY = _siglib_wrap.SIGLIB_NO_PARITY
SIGLIB_EVEN_PARITY = _siglib_wrap.SIGLIB_EVEN_PARITY
SIGLIB_ODD_PARITY = _siglib_wrap.SIGLIB_ODD_PARITY
SIGLIB_ELG_TRIGGER_START = _siglib_wrap.SIGLIB_ELG_TRIGGER_START
SIGLIB_ELG_TRIGGER_MIDDLE = _siglib_wrap.SIGLIB_ELG_TRIGGER_MIDDLE
SIGLIB_COSTAS_LOOP_MULTIPLY_LOOP = _siglib_wrap.SIGLIB_COSTAS_LOOP_MULTIPLY_LOOP
SIGLIB_COSTAS_LOOP_POLARITY_LOOP = _siglib_wrap.SIGLIB_COSTAS_LOOP_POLARITY_LOOP
SIGLIB_COSTAS_LOOP_HARD_LIMITED_LOOP = _siglib_wrap.SIGLIB_COSTAS_LOOP_HARD_LIMITED_LOOP
SIGLIB_BUTTERWORTH_IIR_NORM_COEFFS = _siglib_wrap.SIGLIB_BUTTERWORTH_IIR_NORM_COEFFS
SIGLIB_BESSEL_IIR_NORM_COEFFS = _siglib_wrap.SIGLIB_BESSEL_IIR_NORM_COEFFS
SIGLIB_FILTER_LOW_PASS = _siglib_wrap.SIGLIB_FILTER_LOW_PASS
SIGLIB_FILTER_HIGH_PASS = _siglib_wrap.SIGLIB_FILTER_HIGH_PASS
SIGLIB_FILTER_BAND_PASS = _siglib_wrap.SIGLIB_FILTER_BAND_PASS
SIGLIB_FILTER_NOTCH = _siglib_wrap.SIGLIB_FILTER_NOTCH
SIGLIB_EDGE_ENHANCEMENT = _siglib_wrap.SIGLIB_EDGE_ENHANCEMENT
SIGLIB_HORIZONTAL_EDGE = _siglib_wrap.SIGLIB_HORIZONTAL_EDGE
SIGLIB_VERTICAL_EDGE = _siglib_wrap.SIGLIB_VERTICAL_EDGE
SIGLIB_SIGNAL_COHERENT = _siglib_wrap.SIGLIB_SIGNAL_COHERENT
SIGLIB_SIGNAL_INCOHERENT = _siglib_wrap.SIGLIB_SIGNAL_INCOHERENT
SIGLIB_FIND_GREATER_THAN_ZERO = _siglib_wrap.SIGLIB_FIND_GREATER_THAN_ZERO
SIGLIB_FIND_GREATER_THAN_OR_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_GREATER_THAN_OR_EQUAL_TO_ZERO
SIGLIB_FIND_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_EQUAL_TO_ZERO
SIGLIB_FIND_LESS_THAN_ZERO = _siglib_wrap.SIGLIB_FIND_LESS_THAN_ZERO
SIGLIB_FIND_LESS_THAN_OR_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_LESS_THAN_OR_EQUAL_TO_ZERO
SIGLIB_FIND_NOT_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_NOT_EQUAL_TO_ZERO
SIGLIB_NOT_EQUAL = _siglib_wrap.SIGLIB_NOT_EQUAL
SIGLIB_EQUAL = _siglib_wrap.SIGLIB_EQUAL
SIGLIB_LITTLE_ENDIAN = _siglib_wrap.SIGLIB_LITTLE_ENDIAN
SIGLIB_BIG_ENDIAN = _siglib_wrap.SIGLIB_BIG_ENDIAN
SIGLIB_DEGLITCH_ABOVE = _siglib_wrap.SIGLIB_DEGLITCH_ABOVE
SIGLIB_DEGLITCH_BOTH = _siglib_wrap.SIGLIB_DEGLITCH_BOTH
SIGLIB_DEGLITCH_BELOW = _siglib_wrap.SIGLIB_DEGLITCH_BELOW
SIGLIB_ALIGN_EXTEND = _siglib_wrap.SIGLIB_ALIGN_EXTEND
SIGLIB_ALIGN_CROP = _siglib_wrap.SIGLIB_ALIGN_CROP
SIGLIB_FIRST_ROW_KEEP = _siglib_wrap.SIGLIB_FIRST_ROW_KEEP
SIGLIB_FIRST_ROW_IGNORE = _siglib_wrap.SIGLIB_FIRST_ROW_IGNORE
SIGLIB_ACTIVATION_TYPE_RELU = _siglib_wrap.SIGLIB_ACTIVATION_TYPE_RELU
SIGLIB_ACTIVATION_TYPE_LEAKY_RELU = _siglib_wrap.SIGLIB_ACTIVATION_TYPE_LEAKY_RELU
SIGLIB_ACTIVATION_TYPE_LOGISTIC = _siglib_wrap.SIGLIB_ACTIVATION_TYPE_LOGISTIC
SIGLIB_ACTIVATION_TYPE_TANH = _siglib_wrap.SIGLIB_ACTIVATION_TYPE_TANH

def SUF_SiglibVersion():
    return _siglib_wrap.SUF_SiglibVersion()

def SUF_PrintArray(arg1, arg2):
    return _siglib_wrap.SUF_PrintArray(arg1, arg2)

def SUF_PrintFixedPointArray(arg1, arg2):
    return _siglib_wrap.SUF_PrintFixedPointArray(arg1, arg2)

def SUF_PrintComplexArray(arg1, arg2, arg3):
    return _siglib_wrap.SUF_PrintComplexArray(arg1, arg2, arg3)

def SUF_PrintMatrix(arg1, arg2, arg3):
    return _siglib_wrap.SUF_PrintMatrix(arg1, arg2, arg3)

def SUF_PrintPolar(arg1):
    return _siglib_wrap.SUF_PrintPolar(arg1)

def SUF_PrintRectangular(arg1):
    return _siglib_wrap.SUF_PrintRectangular(arg1)

def SUF_PrintIIRCoefficients(arg1, arg2):
    return _siglib_wrap.SUF_PrintIIRCoefficients(arg1, arg2)

def SUF_PrintCount(arg1):
    return _siglib_wrap.SUF_PrintCount(arg1)

def SUF_PrintHigher(arg1, arg2, arg3):
    return _siglib_wrap.SUF_PrintHigher(arg1, arg2, arg3)

def SUF_PrintLower(arg1, arg2, arg3):
    return _siglib_wrap.SUF_PrintLower(arg1, arg2, arg3)

def SUF_ClearDebugfprintf():
    return _siglib_wrap.SUF_ClearDebugfprintf()

def SUF_Debugfprintf(*args):
    return _siglib_wrap.SUF_Debugfprintf(*args)

def SUF_Debugvfprintf(format, arg2):
    return _siglib_wrap.SUF_Debugvfprintf(format, arg2)

def SUF_DebugPrintArray(arg1, arg2):
    return _siglib_wrap.SUF_DebugPrintArray(arg1, arg2)

def SUF_DebugPrintFixedPointArray(arg1, arg2):
    return _siglib_wrap.SUF_DebugPrintFixedPointArray(arg1, arg2)

def SUF_DebugPrintComplexArray(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DebugPrintComplexArray(arg1, arg2, arg3)

def SUF_DebugPrintComplex(real, imag):
    return _siglib_wrap.SUF_DebugPrintComplex(real, imag)

def SUF_DebugPrintComplexRect(Rect):
    return _siglib_wrap.SUF_DebugPrintComplexRect(Rect)

def SUF_DebugPrintComplexPolar(Polar):
    return _siglib_wrap.SUF_DebugPrintComplexPolar(Polar)

def SUF_DebugPrintMatrix(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DebugPrintMatrix(arg1, arg2, arg3)

def SUF_DebugPrintPolar(arg1):
    return _siglib_wrap.SUF_DebugPrintPolar(arg1)

def SUF_DebugPrintRectangular(arg1):
    return _siglib_wrap.SUF_DebugPrintRectangular(arg1)

def SUF_DebugPrintIIRCoefficients(arg1, arg2):
    return _siglib_wrap.SUF_DebugPrintIIRCoefficients(arg1, arg2)

def SUF_DebugPrintCount(String):
    return _siglib_wrap.SUF_DebugPrintCount(String)

def SUF_DebugPrintHigher(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DebugPrintHigher(arg1, arg2, arg3)

def SUF_DebugPrintLower(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DebugPrintLower(arg1, arg2, arg3)

def SUF_StrError(ErrNo):
    return _siglib_wrap.SUF_StrError(ErrNo)

def SUF_BinReadData(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_BinReadData(arg1, arg2, arg3, arg4)

def SUF_BinWriteData(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_BinWriteData(arg1, arg2, arg3, arg4)

def SUF_BinReadFile(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_BinReadFile(arg1, arg2, arg3, arg4)

def SUF_BinWriteFile(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_BinWriteFile(arg1, arg2, arg3, arg4)

def SUF_PCMReadData(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_PCMReadData(arg1, arg2, arg3, arg4, arg5)

def SUF_PCMWriteData(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_PCMWriteData(arg1, arg2, arg3, arg4, arg5)

def SUF_PCMReadFile(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_PCMReadFile(arg1, arg2, arg3, arg4, arg5)

def SUF_PCMWriteFile(arg1, arg2, arg3, wordLength, arg5):
    return _siglib_wrap.SUF_PCMWriteFile(arg1, arg2, arg3, wordLength, arg5)

def SUF_CsvReadData(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_CsvReadData(arg1, arg2, arg3, arg4, arg5)

def SUF_CsvWriteData(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SUF_CsvWriteData(arg1, arg2, arg3, arg4, arg5, arg6)

def SUF_CsvReadFile(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_CsvReadFile(arg1, arg2, arg3, arg4, arg5)

def SUF_CsvWriteFile(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SUF_CsvWriteFile(arg1, arg2, arg3, arg4, arg5, arg6)

def SUF_CsvReadMatrix(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_CsvReadMatrix(arg1, arg2, arg3, arg4, arg5)

def SUF_CsvWriteMatrix(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_CsvWriteMatrix(arg1, arg2, arg3, arg4)

def SUF_DatReadData(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DatReadData(arg1, arg2, arg3)

def SUF_DatWriteData(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_DatWriteData(arg1, arg2, arg3, arg4, arg5)

def SUF_DatReadHeader(arg1):
    return _siglib_wrap.SUF_DatReadHeader(arg1)

def SUF_DatWriteHeader(arg1, arg2):
    return _siglib_wrap.SUF_DatWriteHeader(arg1, arg2)

def SUF_SigReadData(arg1, arg2, arg3):
    return _siglib_wrap.SUF_SigReadData(arg1, arg2, arg3)

def SUF_SigWriteData(arg1, arg2, arg3):
    return _siglib_wrap.SUF_SigWriteData(arg1, arg2, arg3)

def SUF_SigReadFile(arg1, arg2):
    return _siglib_wrap.SUF_SigReadFile(arg1, arg2)

def SUF_SigWriteFile(arg1, arg2, arg3):
    return _siglib_wrap.SUF_SigWriteFile(arg1, arg2, arg3)

def SUF_SigCountSamplesInFile(arg1):
    return _siglib_wrap.SUF_SigCountSamplesInFile(arg1)

def SUF_WavReadData(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavReadData(arg1, arg2, arg3, arg4)

def SUF_WavWriteData(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavWriteData(arg1, arg2, arg3, arg4)

def SUF_WavReadData16(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavReadData16(arg1, arg2, arg3, arg4)

def SUF_WavWriteData16(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavWriteData16(arg1, arg2, arg3, arg4)

def SUF_WavReadData32(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavReadData32(arg1, arg2, arg3, arg4)

def SUF_WavWriteData32(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavWriteData32(arg1, arg2, arg3, arg4)

def SUF_WavReadWord(arg1):
    return _siglib_wrap.SUF_WavReadWord(arg1)

def SUF_WavReadLong(arg1):
    return _siglib_wrap.SUF_WavReadLong(arg1)

def SUF_WavWriteWord(arg1, arg2):
    return _siglib_wrap.SUF_WavWriteWord(arg1, arg2)

def SUF_WavWriteLong(arg1, arg2):
    return _siglib_wrap.SUF_WavWriteLong(arg1, arg2)

def SUF_WavReadHeader(arg1):
    return _siglib_wrap.SUF_WavReadHeader(arg1)

def SUF_WavWriteHeader(arg1, arg2):
    return _siglib_wrap.SUF_WavWriteHeader(arg1, arg2)

def SUF_WavDisplayInfo(arg1):
    return _siglib_wrap.SUF_WavDisplayInfo(arg1)

def SUF_WavSetInfo(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SUF_WavSetInfo(arg1, arg2, arg3, arg4, arg5, arg6)

def SUF_WavFileLength(arg1):
    return _siglib_wrap.SUF_WavFileLength(arg1)

def SUF_WavReadFile(arg1, arg2):
    return _siglib_wrap.SUF_WavReadFile(arg1, arg2)

def SUF_WavWriteFile(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavWriteFile(arg1, arg2, arg3, arg4)

def SUF_WavWriteFileScaled(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_WavWriteFileScaled(arg1, arg2, arg3, arg4)

def SUF_XmtReadData(arg1, arg2, arg3):
    return _siglib_wrap.SUF_XmtReadData(arg1, arg2, arg3)

def SUF_WriteWeightsIntegerCFile(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SUF_WriteWeightsIntegerCFile(arg1, arg2, arg3, arg4, arg5, arg6)

def SUF_WriteWeightsFloatCFile(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SUF_WriteWeightsFloatCFile(arg1, arg2, arg3, arg4, arg5, arg6)

def SUF_WriteWeightsBinaryFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SUF_WriteWeightsBinaryFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SUF_ReadWeightsBinaryFile(arg1, arg2, arg3):
    return _siglib_wrap.SUF_ReadWeightsBinaryFile(arg1, arg2, arg3)

def SUF_WriteWeightsWithBiasesIntegerCFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SUF_WriteWeightsWithBiasesIntegerCFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SUF_WriteWeightsWithBiasesFloatCFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SUF_WriteWeightsWithBiasesFloatCFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SUF_WriteWeightsWithBiasesBinaryFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SUF_WriteWeightsWithBiasesBinaryFile(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SUF_ReadWeightsWithBiasesBinaryFile(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_ReadWeightsWithBiasesBinaryFile(arg1, arg2, arg3, arg4, arg5)

def SIF_Fft(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fft(arg1, arg2, arg3)

def SDA_Rfft(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Rfft(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Cfft(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Cfft(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Cifft(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Cifft(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_BitReverseReorder(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_BitReverseReorder(arg1, arg2, arg3, arg4)

def SDA_IndexBitReverseReorder(arg1, arg2, arg3):
    return _siglib_wrap.SDA_IndexBitReverseReorder(arg1, arg2, arg3)

def SIF_FastBitReverseReorder(arg1, arg2):
    return _siglib_wrap.SIF_FastBitReverseReorder(arg1, arg2)

def SDA_RealRealCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_RealRealCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_RealComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_RealComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_ComplexComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ComplexComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_FftTone(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FftTone(arg1, arg2, arg3)

def SDA_RfftTone(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_RfftTone(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_Rfftr(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Rfftr(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_Fft4(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fft4(arg1, arg2, arg3)

def SDA_Rfft4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Rfft4(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Cfft4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Cfft4(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_DigitReverseReorder4(arg1, arg2, arg3):
    return _siglib_wrap.SDA_DigitReverseReorder4(arg1, arg2, arg3)

def SDA_IndexDigitReverseReorder4(arg1, arg2, arg3):
    return _siglib_wrap.SDA_IndexDigitReverseReorder4(arg1, arg2, arg3)

def SIF_FastDigitReverseReorder4(arg1, arg2):
    return _siglib_wrap.SIF_FastDigitReverseReorder4(arg1, arg2)

def SDA_Cfft2rBy1c(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Cfft2rBy1c(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Cfft2rBy1cr(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Cfft2rBy1cr(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Cfft42rBy1c(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Cfft42rBy1c(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Cfft42rBy1cr(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Cfft42rBy1cr(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDS_Cfft2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_Cfft2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Cfft2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Cfft2(arg1, arg2, arg3, arg4)

def SDS_Cfft3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDS_Cfft3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_Cfft3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Cfft3(arg1, arg2, arg3, arg4)

def SIF_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SIF_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SDA_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31):
    return _siglib_wrap.SDA_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31)

def SIF_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SIF_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def SIF_FdHilbert(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FdHilbert(arg1, arg2, arg3, arg4)

def SDA_FdHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_FdHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_FdAnalytic(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FdAnalytic(arg1, arg2, arg3, arg4)

def SDA_FdAnalytic(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_FdAnalytic(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_InstantFreq(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_InstantFreq(arg1, arg2, arg3, arg4)

def SDA_Rdft(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Rdft(arg1, arg2, arg3, arg4)

def SDA_Ridft(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Ridft(arg1, arg2, arg3, arg4)

def SDA_Cdft(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Cdft(arg1, arg2, arg3, arg4, arg5)

def SDA_Cidft(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Cidft(arg1, arg2, arg3, arg4, arg5)

def SDA_FftShift(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FftShift(arg1, arg2, arg3)

def SDA_CfftShift(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_CfftShift(arg1, arg2, arg3, arg4, arg5)

def SDA_FftExtend(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FftExtend(arg1, arg2, arg3, arg4)

def SDA_CfftExtend(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CfftExtend(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_DctII(arg1, arg2):
    return _siglib_wrap.SIF_DctII(arg1, arg2)

def SDA_DctII(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_DctII(arg1, arg2, arg3, arg4)

def SIF_DctIIOrthogonal(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_DctIIOrthogonal(arg1, arg2, arg3, arg4)

def SDA_DctIIOrthogonal(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_DctIIOrthogonal(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_FftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SIF_FftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SUF_FftArbAllocLength(arg1):
    return _siglib_wrap.SUF_FftArbAllocLength(arg1)

def SDA_RfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_RfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def SDA_CfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_CfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SDA_CifftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_CifftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SIF_FastAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FastAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4)

def SDA_FastAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FastAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_FastCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FastCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SIF_ArbAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SIF_ArbAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SDA_ArbAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_ArbAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SDA_ArbCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_ArbCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SIF_WelchPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIF_WelchPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_WelchRealPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_WelchRealPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SDA_WelchComplexPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_WelchComplexPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SIF_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4)

def SDA_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SIF_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIF_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SIF_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIF_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SIF_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_FftConvolveArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftConvolveArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SIF_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_FftCorrelateArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftCorrelateArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SIF_Czt(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SIF_Czt(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def SIF_Awn(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_Awn(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_Vl(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_Vl(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_Wm(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_Wm(arg1, arg2, arg3, arg4, arg5)

def SIF_Window(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Window(arg1, arg2, arg3, arg4)

def SIF_TableTopWindow(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_TableTopWindow(arg1, arg2, arg3, arg4, arg5)

def SDA_Window(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Window(arg1, arg2, arg3, arg4)

def SDA_ComplexWindow(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ComplexWindow(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_WindowInverseCoherentGain(arg1, arg2):
    return _siglib_wrap.SDA_WindowInverseCoherentGain(arg1, arg2)

def SDA_WindowEquivalentNoiseBandwidth(arg1, arg2):
    return _siglib_wrap.SDA_WindowEquivalentNoiseBandwidth(arg1, arg2)

def SDA_WindowProcessingGain(arg1, arg2):
    return _siglib_wrap.SDA_WindowProcessingGain(arg1, arg2)

def SDS_I0Bessel(arg1):
    return _siglib_wrap.SDS_I0Bessel(arg1)

def SIF_Fir(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fir(arg1, arg2, arg3)

def SDS_Fir(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Fir(arg1, arg2, arg3, arg4, arg5)

def SDA_Fir(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Fir(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_FirAddSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FirAddSample(arg1, arg2, arg3, arg4)

def SDA_FirAddSamples(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FirAddSamples(arg1, arg2, arg3, arg4, arg5)

def SIF_Comb(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Comb(arg1, arg2, arg3, arg4)

def SDS_Comb(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Comb(arg1, arg2, arg3, arg4, arg5)

def SDA_Comb(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Comb(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_FirComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirComplex(arg1, arg2, arg3, arg4)

def SDS_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _siglib_wrap.SDA_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)

def SIF_FirWithStore(arg1, arg2):
    return _siglib_wrap.SIF_FirWithStore(arg1, arg2)

def SDS_FirWithStore(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FirWithStore(arg1, arg2, arg3, arg4)

def SDA_FirWithStore(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FirWithStore(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_FirComplexWithStore(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FirComplexWithStore(arg1, arg2, arg3)

def SDS_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDS_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDS_FirWithStoreAddSample(arg1, arg2, arg3):
    return _siglib_wrap.SDS_FirWithStoreAddSample(arg1, arg2, arg3)

def SDA_FirWithStoreAddSamples(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FirWithStoreAddSamples(arg1, arg2, arg3, arg4)

def SIF_FirExtendedArray(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_FirExtendedArray(arg1, arg2, arg3, arg4, arg5)

def SDS_FirExtendedArray(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_FirExtendedArray(arg1, arg2, arg3, arg4, arg5)

def SDA_FirExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FirExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDS_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _siglib_wrap.SDA_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)

def SDS_FirExtendedArrayAddSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FirExtendedArrayAddSample(arg1, arg2, arg3, arg4)

def SDA_FirExtendedArrayAddSamples(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FirExtendedArrayAddSamples(arg1, arg2, arg3, arg4, arg5)

def SIF_FirLowPassFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirLowPassFilter(arg1, arg2, arg3, arg4)

def SIF_FirHighPassFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirHighPassFilter(arg1, arg2, arg3, arg4)

def SIF_FirBandPassFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_FirBandPassFilter(arg1, arg2, arg3, arg4, arg5)

def SIF_FirLowPassFilterWindow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirLowPassFilterWindow(arg1, arg2, arg3, arg4)

def SIF_FirHighPassFilterWindow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirHighPassFilterWindow(arg1, arg2, arg3, arg4)

def SIF_FirBandPassFilterWindow(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_FirBandPassFilterWindow(arg1, arg2, arg3, arg4, arg5)

def SUF_FirKaiserApproximation(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_FirKaiserApproximation(arg1, arg2, arg3, arg4, arg5)

def SIF_FirMatchedFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FirMatchedFilter(arg1, arg2, arg3)

def SDA_FirFilterInverseCoherentGain(arg1, arg2):
    return _siglib_wrap.SDA_FirFilterInverseCoherentGain(arg1, arg2)

def SIF_TappedDelayLine(arg1, arg2, arg3):
    return _siglib_wrap.SIF_TappedDelayLine(arg1, arg2, arg3)

def SDS_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SIF_TappedDelayLineComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_TappedDelayLineComplex(arg1, arg2, arg3, arg4)

def SDS_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDS_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SIF_TappedDelayLineIQ(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_TappedDelayLineIQ(arg1, arg2, arg3, arg4)

def SDS_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDS_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SIF_FirPolyPhaseGenerate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_FirPolyPhaseGenerate(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_FirZeroNotchFilter(arg1, arg2):
    return _siglib_wrap.SIF_FirZeroNotchFilter(arg1, arg2)

def SDA_FirLpBpShift(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FirLpBpShift(arg1, arg2, arg3, arg4)

def SDA_FirLpHpShift(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FirLpHpShift(arg1, arg2, arg3)

def SIF_Iir(arg1, arg2):
    return _siglib_wrap.SIF_Iir(arg1, arg2)

def SDS_Iir(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Iir(arg1, arg2, arg3, arg4)

def SDA_Iir(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Iir(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_IirMac(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_IirMac(arg1, arg2, arg3, arg4)

def SDA_IirMac(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirMac(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_IirOrderN(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirOrderN(arg1, arg2, arg3)

def SDS_IirOrderN(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_IirOrderN(arg1, arg2, arg3, arg4, arg5)

def SDA_IirOrderN(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_IirOrderN(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_IirNc(arg1, arg2):
    return _siglib_wrap.SIF_IirNc(arg1, arg2)

def SDA_IirNc(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirNc(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_BilinearTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_BilinearTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDS_PreWarp(arg1, arg2):
    return _siglib_wrap.SDS_PreWarp(arg1, arg2)

def SDA_MatchedZTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_MatchedZTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_IirZplaneToCoeffs(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IirZplaneToCoeffs(arg1, arg2, arg3, arg4, arg5)

def SDA_IirZplanePolarToCoeffs(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IirZplanePolarToCoeffs(arg1, arg2, arg3, arg4, arg5)

def SDA_IirZplaneLpfToLpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_IirZplaneLpfToLpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_IirZplaneLpfToHpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_IirZplaneLpfToHpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_IirZplaneLpfToBpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_IirZplaneLpfToBpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_IirZplaneLpfToBsf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_IirZplaneLpfToBsf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_IirModifyFilterGain(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IirModifyFilterGain(arg1, arg2, arg3, arg4, arg5)

def SIF_IirLowPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirLowPassFilter(arg1, arg2, arg3)

def SIF_IirHighPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirHighPassFilter(arg1, arg2, arg3)

def SIF_IirAllPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirAllPassFilter(arg1, arg2, arg3)

def SIF_IirBandPassFilterConstantSkirtGain(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirBandPassFilterConstantSkirtGain(arg1, arg2, arg3)

def SIF_IirBandPassFilter0dBPeakGain(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirBandPassFilter0dBPeakGain(arg1, arg2, arg3)

def SIF_IirNotchFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNotchFilter(arg1, arg2, arg3)

def SIF_IirPeakingFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirPeakingFilter(arg1, arg2, arg3, arg4)

def SIF_IirLowShelfFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirLowShelfFilter(arg1, arg2, arg3, arg4)

def SIF_IirHighShelfFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirHighShelfFilter(arg1, arg2, arg3, arg4)

def SDS_IirRemoveDC(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_IirRemoveDC(arg1, arg2, arg3, arg4)

def SDA_IirRemoveDC(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirRemoveDC(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_OnePole(arg1):
    return _siglib_wrap.SIF_OnePole(arg1)

def SDS_OnePole(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePole(arg1, arg2, arg3)

def SDA_OnePole(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePole(arg1, arg2, arg3, arg4, arg5)

def SDS_OnePoleNormalized(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePoleNormalized(arg1, arg2, arg3)

def SDA_OnePoleNormalized(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePoleNormalized(arg1, arg2, arg3, arg4, arg5)

def SDS_OnePoleEWMA(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePoleEWMA(arg1, arg2, arg3)

def SDA_OnePoleEWMA(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePoleEWMA(arg1, arg2, arg3, arg4, arg5)

def SDA_OnePolePerSample(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePolePerSample(arg1, arg2, arg3, arg4, arg5)

def SIF_OnePoleHighPass(arg1):
    return _siglib_wrap.SIF_OnePoleHighPass(arg1)

def SDS_OnePoleHighPass(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePoleHighPass(arg1, arg2, arg3)

def SDA_OnePoleHighPass(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePoleHighPass(arg1, arg2, arg3, arg4, arg5)

def SDS_OnePoleHighPassNormalized(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePoleHighPassNormalized(arg1, arg2, arg3)

def SDA_OnePoleHighPassNormalized(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePoleHighPassNormalized(arg1, arg2, arg3, arg4, arg5)

def SDA_OnePoleHighPassPerSample(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePoleHighPassPerSample(arg1, arg2, arg3, arg4, arg5)

def SDS_OnePoleTimeConstantToFilterCoeff(arg1, arg2):
    return _siglib_wrap.SDS_OnePoleTimeConstantToFilterCoeff(arg1, arg2)

def SDS_OnePoleCutOffFrequencyToFilterCoeff(arg1, arg2):
    return _siglib_wrap.SDS_OnePoleCutOffFrequencyToFilterCoeff(arg1, arg2)

def SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff(arg1, arg2):
    return _siglib_wrap.SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff(arg1, arg2)

def SIF_AllPole(arg1, arg2, arg3):
    return _siglib_wrap.SIF_AllPole(arg1, arg2, arg3)

def SDS_AllPole(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_AllPole(arg1, arg2, arg3, arg4, arg5)

def SDA_AllPole(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AllPole(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_ZDomainCoefficientReorg(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ZDomainCoefficientReorg(arg1, arg2, arg3, arg4)

def SIF_IirNotchFilter2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirNotchFilter2(arg1, arg2, arg3, arg4)

def SIF_IirNormalizedCoefficients(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNormalizedCoefficients(arg1, arg2, arg3)

def SIF_IirNormalizedSPlaneCoefficients(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNormalizedSPlaneCoefficients(arg1, arg2, arg3)

def SDA_TranslateSPlaneCutOffFrequency(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_TranslateSPlaneCutOffFrequency(arg1, arg2, arg3, arg4)

def SDA_IirLpLpShift(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirLpLpShift(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_IirLpHpShift(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirLpHpShift(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_Iir2PoleLpf(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Iir2PoleLpf(arg1, arg2, arg3, arg4)

def SDS_Iir2Pole(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Iir2Pole(arg1, arg2, arg3)

def SDA_Iir2Pole(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Iir2Pole(arg1, arg2, arg3, arg4, arg5)

def SDA_IirNegateAlphaCoeffs(arg1, arg2, arg3):
    return _siglib_wrap.SDA_IirNegateAlphaCoeffs(arg1, arg2, arg3)

def SIF_GraphicEqualizerFilterBank(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_GraphicEqualizerFilterBank(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Integrate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Integrate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Differentiate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Differentiate(arg1, arg2, arg3, arg4)

def SIF_LeakyIntegrator(arg1):
    return _siglib_wrap.SIF_LeakyIntegrator(arg1)

def SDS_LeakyIntegrator1(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LeakyIntegrator1(arg1, arg2, arg3, arg4)

def SDS_LeakyIntegrator2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LeakyIntegrator2(arg1, arg2, arg3, arg4)

def SIF_HilbertTransformerFirFilter(arg1, arg2):
    return _siglib_wrap.SIF_HilbertTransformerFirFilter(arg1, arg2)

def SIF_GoertzelIirFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_GoertzelIirFilter(arg1, arg2, arg3)

def SDA_GoertzelIirFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_GoertzelIirFilter(arg1, arg2, arg3, arg4, arg5)

def SDS_GoertzelIirFilter(arg1, arg2, arg3):
    return _siglib_wrap.SDS_GoertzelIirFilter(arg1, arg2, arg3)

def SIF_GoertzelDetect(arg1, arg2):
    return _siglib_wrap.SIF_GoertzelDetect(arg1, arg2)

def SDA_GoertzelDetect(arg1, arg2, arg3):
    return _siglib_wrap.SDA_GoertzelDetect(arg1, arg2, arg3)

def SIF_GoertzelDetectComplex(arg1, arg2):
    return _siglib_wrap.SIF_GoertzelDetectComplex(arg1, arg2)

def SDA_GoertzelDetectComplex(arg1, arg2, arg3):
    return _siglib_wrap.SDA_GoertzelDetectComplex(arg1, arg2, arg3)

def SIF_GaussianFirFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_GaussianFirFilter(arg1, arg2, arg3)

def SIF_GaussianFirFilter2(arg1, arg2, arg3):
    return _siglib_wrap.SIF_GaussianFirFilter2(arg1, arg2, arg3)

def SIF_RaisedCosineFirFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_RaisedCosineFirFilter(arg1, arg2, arg3, arg4)

def SIF_RootRaisedCosineFirFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_RootRaisedCosineFirFilter(arg1, arg2, arg3, arg4)

def SDS_ZTransform(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_ZTransform(arg1, arg2, arg3, arg4, arg5)

def SDS_ZTransformDB(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_ZTransformDB(arg1, arg2, arg3, arg4, arg5)

def SUF_EstimateBPFirFilterLength(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_EstimateBPFirFilterLength(arg1, arg2, arg3, arg4)

def SUF_EstimateBPFirFilterError(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_EstimateBPFirFilterError(arg1, arg2, arg3, arg4, arg5)

def SUF_FrequenciesToOctaves(Fl, Fh):
    return _siglib_wrap.SUF_FrequenciesToOctaves(Fl, Fh)

def SUF_FrequenciesToCentreFreqHz(Fl, Fh):
    return _siglib_wrap.SUF_FrequenciesToCentreFreqHz(Fl, Fh)

def SUF_FrequenciesToQFactor(Fl, Fh):
    return _siglib_wrap.SUF_FrequenciesToQFactor(Fl, Fh)

def SUF_BandwidthToQFactor(BW):
    return _siglib_wrap.SUF_BandwidthToQFactor(BW)

def SUF_QFactorToBandwidth(QFactor):
    return _siglib_wrap.SUF_QFactorToBandwidth(QFactor)

def SDS_KalmanFilter1D(arg1, arg2):
    return _siglib_wrap.SDS_KalmanFilter1D(arg1, arg2)

def SDS_KalmanFilter2D(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_KalmanFilter2D(arg1, arg2, arg3, arg4, arg5)

def SDA_LinearMicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_LinearMicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_LinearMicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_LinearMicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_MicrophoneArrayCalculateDelays(arg1, arg2, arg3):
    return _siglib_wrap.SDA_MicrophoneArrayCalculateDelays(arg1, arg2, arg3)

def SDA_MicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_MicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_MicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_MicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDS_TemperatureToSpeedOfSoundInAir(arg1):
    return _siglib_wrap.SDS_TemperatureToSpeedOfSoundInAir(arg1)

def SIF_Lms(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_Lms(arg1, arg2, arg3, arg4, arg5)

def SDS_Lms(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Lms(arg1, arg2, arg3, arg4, arg5)

def SDA_LmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_LmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_LeakyLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_LeakyLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_NormalizedLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_NormalizedLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_SignErrorLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignErrorLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_SignDataLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignDataLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_SignSignLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignSignLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ConvolveLinear(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ConvolveLinear(arg1, arg2, arg3, arg4, arg5)

def SDA_ConvolvePartial(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ConvolvePartial(arg1, arg2, arg3, arg4, arg5)

def SDA_ConvolveCircular(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ConvolveCircular(arg1, arg2, arg3, arg4)

def SDA_ConvolveLinearComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ConvolveLinearComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_ConvolvePartialComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ConvolvePartialComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_ConvolveCircularComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ConvolveCircularComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_FftDeconvolution(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_FftDeconvolution(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SIF_FftDeconvolutionPre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FftDeconvolutionPre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FftDeconvolutionPre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FftDeconvolutionPre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_CorrelateLinear(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CorrelateLinear(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_CorrelatePartial(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_CorrelatePartial(arg1, arg2, arg3, arg4, arg5)

def SDA_CorrelateCircular(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_CorrelateCircular(arg1, arg2, arg3, arg4)

def SDA_Covariance(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Covariance(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_CovariancePartial(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CovariancePartial(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_CorrelateLinearReturnPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CorrelateLinearReturnPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_FixedDelay(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FixedDelay(arg1, arg2, arg3)

def SDS_FixedDelay(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FixedDelay(arg1, arg2, arg3, arg4)

def SDA_FixedDelay(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FixedDelay(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_FixedDelayComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FixedDelayComplex(arg1, arg2, arg3, arg4)

def SDS_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_ShortFixedDelay(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ShortFixedDelay(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_VariableDelay(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_VariableDelay(arg1, arg2, arg3, arg4, arg5)

def SDA_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDS_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SUF_IncreaseVariableDelay(arg1, arg2, arg3):
    return _siglib_wrap.SUF_IncreaseVariableDelay(arg1, arg2, arg3)

def SUF_DecreaseVariableDelay(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DecreaseVariableDelay(arg1, arg2, arg3)

def SDA_Align(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Align(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIM_Fft2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIM_Fft2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SIF_Fft2d(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fft2d(arg1, arg2, arg3)

def SIM_Conv3x3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIM_Conv3x3(arg1, arg2, arg3, arg4, arg5)

def SIM_Sobel3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_Sobel3x3(arg1, arg2, arg3, arg4)

def SIM_SobelVertical3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_SobelVertical3x3(arg1, arg2, arg3, arg4)

def SIM_SobelHorizontal3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_SobelHorizontal3x3(arg1, arg2, arg3, arg4)

def SIM_Median3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_Median3x3(arg1, arg2, arg3, arg4)

def SIF_ConvCoefficients3x3(arg1, arg2):
    return _siglib_wrap.SIF_ConvCoefficients3x3(arg1, arg2)

def SIM_Max(arg1, arg2):
    return _siglib_wrap.SIM_Max(arg1, arg2)

def SIM_Min(arg1, arg2):
    return _siglib_wrap.SIM_Min(arg1, arg2)

def SIF_Dct8x8():
    return _siglib_wrap.SIF_Dct8x8()

def SIM_Dct8x8(arg1, arg2):
    return _siglib_wrap.SIM_Dct8x8(arg1, arg2)

def SIM_Idct8x8(arg1, arg2):
    return _siglib_wrap.SIM_Idct8x8(arg1, arg2)

def SIM_ZigZagScan(arg1, arg2, arg3):
    return _siglib_wrap.SIM_ZigZagScan(arg1, arg2, arg3)

def SIM_ZigZagDescan(arg1, arg2, arg3):
    return _siglib_wrap.SIM_ZigZagDescan(arg1, arg2, arg3)

def SDA_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _siglib_wrap.SDA_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)

def SDS_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SIF_Resonator(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Resonator(arg1, arg2, arg3, arg4)

def SDA_Resonator(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Resonator(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_Resonator1(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_Resonator1(arg1, arg2, arg3, arg4, arg5)

def SDA_Resonator1(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Resonator1(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Resonator1Add(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Resonator1Add(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_SignalGeneratePolarWhiteNoise(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SignalGeneratePolarWhiteNoise(arg1, arg2, arg3, arg4)

def SDS_SignalGeneratePolarWhiteNoise(arg1):
    return _siglib_wrap.SDS_SignalGeneratePolarWhiteNoise(arg1)

def SDA_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3):
    return _siglib_wrap.SDS_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3)

def SDA_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDS_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Ramp(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Ramp(arg1, arg2, arg3, arg4)

def SIF_RandomNumber():
    return _siglib_wrap.SIF_RandomNumber()

def SDS_RandomNumber(arg1, arg2):
    return _siglib_wrap.SDS_RandomNumber(arg1, arg2)

def SDA_RandomNumber(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_RandomNumber(arg1, arg2, arg3, arg4)

def SDA_BitErrorRate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_BitErrorRate(arg1, arg2, arg3, arg4)

def SDA_Interleave(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Interleave(arg1, arg2, arg3, arg4)

def SDA_Deinterleave(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Deinterleave(arg1, arg2, arg3, arg4)

def SCV_EuclideanDistance(arg1, arg2):
    return _siglib_wrap.SCV_EuclideanDistance(arg1, arg2)

def SCV_EuclideanDistanceSquared(arg1, arg2):
    return _siglib_wrap.SCV_EuclideanDistanceSquared(arg1, arg2)

def SCA_EuclideanDistance(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SCA_EuclideanDistance(arg1, arg2, arg3, arg4)

def SCA_EuclideanDistanceSquared(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SCA_EuclideanDistanceSquared(arg1, arg2, arg3, arg4)

def SDS_EuclideanDistance(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_EuclideanDistance(arg1, arg2, arg3, arg4)

def SDS_EuclideanDistanceSquared(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_EuclideanDistanceSquared(arg1, arg2, arg3, arg4)

def SDA_EuclideanDistance(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_EuclideanDistance(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_EuclideanDistanceSquared(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_EuclideanDistanceSquared(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_ManchesterEncode(arg1):
    return _siglib_wrap.SDS_ManchesterEncode(arg1)

def SDS_ManchesterDecode(arg1):
    return _siglib_wrap.SDS_ManchesterDecode(arg1)

def SDS_ManchesterEncodeByte(arg1):
    return _siglib_wrap.SDS_ManchesterEncodeByte(arg1)

def SDS_ManchesterDecodeByte(arg1):
    return _siglib_wrap.SDS_ManchesterDecodeByte(arg1)

def SIF_DetectNumericalWordSequence(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_DetectNumericalWordSequence(arg1, arg2, arg3, arg4)

def SDS_DetectNumericalWordSequence(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_DetectNumericalWordSequence(arg1, arg2, arg3, arg4, arg5)

def SIF_DetectNumericalBitSequence(arg1, arg2, arg3):
    return _siglib_wrap.SIF_DetectNumericalBitSequence(arg1, arg2, arg3)

def SDS_DetectNumericalBitSequence(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_DetectNumericalBitSequence(arg1, arg2, arg3, arg4, arg5)

def SIF_DetectCharacterSequence(arg1, arg2):
    return _siglib_wrap.SIF_DetectCharacterSequence(arg1, arg2)

def SDS_DetectCharacterSequence(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_DetectCharacterSequence(arg1, arg2, arg3, arg4)

def SDS_ErrorVector(arg1, arg2):
    return _siglib_wrap.SDS_ErrorVector(arg1, arg2)

def SDS_ErrorVectorMagnitudePercent(arg1, arg2):
    return _siglib_wrap.SDS_ErrorVectorMagnitudePercent(arg1, arg2)

def SDS_ErrorVectorMagnitudeDecibels(arg1, arg2):
    return _siglib_wrap.SDS_ErrorVectorMagnitudeDecibels(arg1, arg2)

def SDS_ReverseDiBits(arg1):
    return _siglib_wrap.SDS_ReverseDiBits(arg1)

def SDS_QpskBitErrorCount(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_QpskBitErrorCount(arg1, arg2, arg3, arg4)

def SDS_BitErrorRate(arg1, arg2):
    return _siglib_wrap.SDS_BitErrorRate(arg1, arg2)

def SIF_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SIF_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SDS_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SDS_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def SIF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SIF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDS_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDS_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SDA_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SRF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SRF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SIF_TriggerReverberator(arg1, arg2, arg3):
    return _siglib_wrap.SIF_TriggerReverberator(arg1, arg2, arg3)

def SDA_TriggerReverberator(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_TriggerReverberator(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_TriggerReverberator(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_TriggerReverberator(arg1, arg2, arg3, arg4, arg5)

def SDA_TriggerSelector(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_TriggerSelector(arg1, arg2, arg3, arg4)

def SIF_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SIF_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SDA_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SDA_EarlyLateGateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22):
    return _siglib_wrap.SDA_EarlyLateGateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22)

def SDS_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDS_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SIF_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SIF_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def SDA_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SDA_EarlyLateGateSquarePulseDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22):
    return _siglib_wrap.SDA_EarlyLateGateSquarePulseDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22)

def SDS_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDS_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SDS_ConvEncoderK3(arg1, arg2):
    return _siglib_wrap.SDS_ConvEncoderK3(arg1, arg2)

def SIF_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDS_ConvEncoderV32(arg1, arg2, arg3):
    return _siglib_wrap.SDS_ConvEncoderV32(arg1, arg2, arg3)

def SIF_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5)

def SDS_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_AmplitudeModulate(arg1, arg2, arg3):
    return _siglib_wrap.SIF_AmplitudeModulate(arg1, arg2, arg3)

def SDA_AmplitudeModulate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_AmplitudeModulate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_AmplitudeModulate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_AmplitudeModulate(arg1, arg2, arg3, arg4)

def SIF_AmplitudeModulate2(arg1, arg2, arg3):
    return _siglib_wrap.SIF_AmplitudeModulate2(arg1, arg2, arg3)

def SDA_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5)

def SIF_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SIF_FrequencyModulate(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FrequencyModulate(arg1, arg2, arg3)

def SDS_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FrequencyDemodulate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FrequencyDemodulate(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_FrequencyModulateComplex(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FrequencyModulateComplex(arg1, arg2, arg3)

def SDS_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_DeltaModulate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DeltaModulate(arg1, arg2, arg3, arg4, arg5)

def SDA_DeltaDemodulate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_DeltaDemodulate(arg1, arg2, arg3, arg4)

def SDA_DeltaModulate2(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DeltaModulate2(arg1, arg2, arg3, arg4, arg5)

def SIF_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33):
    return _siglib_wrap.SIF_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33)

def SDS_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39):
    return _siglib_wrap.SDS_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39)

def SDS_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43):
    return _siglib_wrap.SDS_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43)

def SDA_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40):
    return _siglib_wrap.SDA_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40)

def SDA_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43):
    return _siglib_wrap.SDA_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43)

def SIF_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SIF_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SDA_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_QpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_QpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def SDS_QpskDifferentialEncode(arg1, arg2):
    return _siglib_wrap.SDS_QpskDifferentialEncode(arg1, arg2)

def SDS_QpskDifferentialDecode(arg1, arg2):
    return _siglib_wrap.SDS_QpskDifferentialDecode(arg1, arg2)

def SIF_DifferentialEncoder(arg1, arg2, arg3):
    return _siglib_wrap.SIF_DifferentialEncoder(arg1, arg2, arg3)

def SDS_DifferentialEncode(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_DifferentialEncode(arg1, arg2, arg3, arg4, arg5)

def SDS_DifferentialDecode(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_DifferentialDecode(arg1, arg2, arg3, arg4, arg5)

def SIF_FskModulate(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FskModulate(arg1, arg2, arg3)

def SDA_FskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_FskDemodulateByte(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FskDemodulateByte(arg1, arg2, arg3, arg4, arg5)

def SDA_CpfskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_CpfskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_FskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_FskDemodulate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FskDemodulate(arg1, arg2, arg3, arg4, arg5)

def SDA_CpfskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_CpfskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SIF_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SDA_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_Qam16DemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_Qam16DemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def SDA_Qam16DifferentialEncode(arg1, arg2):
    return _siglib_wrap.SDA_Qam16DifferentialEncode(arg1, arg2)

def SDA_Qam16DifferentialDecode(arg1, arg2):
    return _siglib_wrap.SDA_Qam16DifferentialDecode(arg1, arg2)

def SIF_OpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_OpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_OpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_OpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SIF_OpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_OpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_OpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_OpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SDA_OpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_OpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SIF_BpskModulate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_BpskModulate(arg1, arg2, arg3, arg4)

def SDA_BpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_BpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_BpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_BpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SIF_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SDA_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SDA_BpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_BpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def SIF_DpskModulate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_DpskModulate(arg1, arg2, arg3, arg4, arg5)

def SDA_DpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_DpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_DpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_DpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def SDA_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def SDA_DpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_DpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def SIF_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SIF_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SDA_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def SDS_ChannelizationCode(arg1, arg2, arg3):
    return _siglib_wrap.SDS_ChannelizationCode(arg1, arg2, arg3)

def SDA_ComplexQPSKSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ComplexQPSKSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_ComplexQPSKDeSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ComplexQPSKDeSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SUF_AsyncCharacterLength(arg1, arg2, arg3):
    return _siglib_wrap.SUF_AsyncCharacterLength(arg1, arg2, arg3)

def SDA_SyncToAsyncConverter(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SyncToAsyncConverter(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_AsyncToSyncConverter(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_AsyncToSyncConverter(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_AsyncAddRemoveStopBits(arg1):
    return _siglib_wrap.SIF_AsyncAddRemoveStopBits(arg1)

def SDA_AsyncRemoveStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AsyncRemoveStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_AsyncAddStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AsyncAddStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_DecreaseWordLength(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DecreaseWordLength(arg1, arg2, arg3, arg4, arg5)

def SDA_IncreaseWordLength(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IncreaseWordLength(arg1, arg2, arg3, arg4, arg5)

def SDS_Scrambler1417(arg1, arg2):
    return _siglib_wrap.SDS_Scrambler1417(arg1, arg2)

def SDS_Descrambler1417(arg1, arg2):
    return _siglib_wrap.SDS_Descrambler1417(arg1, arg2)

def SDS_Scrambler1417WithInversion(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Scrambler1417WithInversion(arg1, arg2, arg3, arg4)

def SDS_Descrambler1417WithInversion(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Descrambler1417WithInversion(arg1, arg2, arg3, arg4)

def SDS_Scrambler1823(arg1, arg2):
    return _siglib_wrap.SDS_Scrambler1823(arg1, arg2)

def SDS_Descrambler1823(arg1, arg2):
    return _siglib_wrap.SDS_Descrambler1823(arg1, arg2)

def SDS_Scrambler523(arg1, arg2):
    return _siglib_wrap.SDS_Scrambler523(arg1, arg2)

def SDS_Descrambler523(arg1, arg2):
    return _siglib_wrap.SDS_Descrambler523(arg1, arg2)

def SDS_ScramblerDescramblerPN9(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblerPN9(arg1, arg2)

def SDS_SequenceGeneratorPN9(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorPN9(arg1)

def SDS_ScramblerDescramblerPN15(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblerPN15(arg1, arg2)

def SDS_SequenceGeneratorPN15(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorPN15(arg1)

def SDS_ScramblerDescramblergCRC24(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC24(arg1, arg2)

def SDS_SequenceGeneratorgCRC24(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC24(arg1)

def SDS_ScramblerDescramblergCRC16(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC16(arg1, arg2)

def SDS_SequenceGeneratorgCRC16(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC16(arg1)

def SDS_ScramblerDescramblergCRC12(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC12(arg1, arg2)

def SDS_SequenceGeneratorgCRC12(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC12(arg1)

def SDS_ScramblerDescramblergCRC8(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC8(arg1, arg2)

def SDS_SequenceGeneratorgCRC8(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC8(arg1)

def SDS_LongCodeGenerator3GPPDL(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LongCodeGenerator3GPPDL(arg1, arg2, arg3, arg4)

def SDS_LongCodeGenerator3GPPUL(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LongCodeGenerator3GPPUL(arg1, arg2, arg3, arg4)

def SDA_Multiplex(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Multiplex(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Demultiplex(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Demultiplex(arg1, arg2, arg3, arg4, arg5)

def SDA_Mux2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Mux2(arg1, arg2, arg3, arg4)

def SDA_Demux2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Demux2(arg1, arg2, arg3, arg4)

def SDA_Mux3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Mux3(arg1, arg2, arg3, arg4, arg5)

def SDA_Demux3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Demux3(arg1, arg2, arg3, arg4, arg5)

def SDA_Mux4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Mux4(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Demux4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Demux4(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Mux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Mux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Demux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Demux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Mux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Mux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Demux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Demux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_Mux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Mux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_Demux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Demux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_Mux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_Mux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_Demux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_Demux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SIF_Decimate(arg1):
    return _siglib_wrap.SIF_Decimate(arg1)

def SDA_Decimate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Decimate(arg1, arg2, arg3, arg4, arg5)

def SIF_Interpolate(arg1):
    return _siglib_wrap.SIF_Interpolate(arg1)

def SDA_Interpolate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Interpolate(arg1, arg2, arg3, arg4, arg5)

def SIF_FilterAndDecimate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FilterAndDecimate(arg1, arg2, arg3, arg4)

def SDA_FilterAndDecimate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FilterAndDecimate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SIF_InterpolateAndFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_InterpolateAndFilter(arg1, arg2, arg3, arg4)

def SDA_InterpolateAndFilter(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_InterpolateAndFilter(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_ResampleLinear(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ResampleLinear(arg1, arg2, arg3, arg4)

def SDA_ResampleLinearNSamples(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ResampleLinearNSamples(arg1, arg2, arg3, arg4, arg5)

def SDA_InterpolateLinear1D(arg1, arg2, arg3):
    return _siglib_wrap.SDA_InterpolateLinear1D(arg1, arg2, arg3)

def SDA_InterpolateLinear2D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_InterpolateLinear2D(arg1, arg2, arg3, arg4)

def SIF_ResampleSinc(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_ResampleSinc(arg1, arg2, arg3, arg4)

def SIF_ResampleWindowedSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_ResampleWindowedSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_ResampleSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ResampleSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_ResampleSincNSamples(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ResampleSincNSamples(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SIF_InterpolateSinc1D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_InterpolateSinc1D(arg1, arg2, arg3, arg4)

def SIF_InterpolateWindowedSinc1D(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_InterpolateWindowedSinc1D(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_InterpolateSinc1D(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_InterpolateSinc1D(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_ResampleLinearContiguous(arg1, arg2):
    return _siglib_wrap.SIF_ResampleLinearContiguous(arg1, arg2)

def SDA_ResampleLinearContiguous(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ResampleLinearContiguous(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_ResampleWindowedSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_ResampleWindowedSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDS_InterpolateQuadratic1D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_InterpolateQuadratic1D(arg1, arg2, arg3, arg4)

def SDS_InterpolateQuadraticBSpline1D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_InterpolateQuadraticBSpline1D(arg1, arg2, arg3, arg4)

def SDS_InterpolateQuadraticLagrange1D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_InterpolateQuadraticLagrange1D(arg1, arg2, arg3, arg4)

def SIF_DtmfGenerate(arg1, arg2):
    return _siglib_wrap.SIF_DtmfGenerate(arg1, arg2)

def SDA_DtmfGenerate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DtmfGenerate(arg1, arg2, arg3, arg4, arg5)

def SIF_DtmfDetect(arg1, arg2):
    return _siglib_wrap.SIF_DtmfDetect(arg1, arg2)

def SDA_DtmfDetect(arg1, arg2):
    return _siglib_wrap.SDA_DtmfDetect(arg1, arg2)

def SDA_DtmfDetectAndValidate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_DtmfDetectAndValidate(arg1, arg2, arg3, arg4, arg5, arg6)

def SUF_AsciiToKeyCode(arg1):
    return _siglib_wrap.SUF_AsciiToKeyCode(arg1)

def SUF_KeyCodeToAscii(arg1):
    return _siglib_wrap.SUF_KeyCodeToAscii(arg1)

def SIF_PreEmphasisFilter(arg1):
    return _siglib_wrap.SIF_PreEmphasisFilter(arg1)

def SDA_PreEmphasisFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_PreEmphasisFilter(arg1, arg2, arg3, arg4, arg5)

def SIF_DeEmphasisFilter(arg1):
    return _siglib_wrap.SIF_DeEmphasisFilter(arg1)

def SDA_DeEmphasisFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DeEmphasisFilter(arg1, arg2, arg3, arg4, arg5)

def SDA_AdpcmEncoder(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AdpcmEncoder(arg1, arg2, arg3)

def SDA_AdpcmEncoderDebug(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_AdpcmEncoderDebug(arg1, arg2, arg3, arg4)

def SDA_AdpcmDecoder(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AdpcmDecoder(arg1, arg2, arg3)

def SDA_Max(arg1, arg2):
    return _siglib_wrap.SDA_Max(arg1, arg2)

def SDA_AbsMax(arg1, arg2):
    return _siglib_wrap.SDA_AbsMax(arg1, arg2)

def SDA_Min(arg1, arg2):
    return _siglib_wrap.SDA_Min(arg1, arg2)

def SDA_AbsMin(arg1, arg2):
    return _siglib_wrap.SDA_AbsMin(arg1, arg2)

def SDA_Middle(arg1, arg2):
    return _siglib_wrap.SDA_Middle(arg1, arg2)

def SDA_Range(arg1, arg2):
    return _siglib_wrap.SDA_Range(arg1, arg2)

def SDA_MaxIndex(arg1, arg2):
    return _siglib_wrap.SDA_MaxIndex(arg1, arg2)

def SDA_AbsMaxIndex(arg1, arg2):
    return _siglib_wrap.SDA_AbsMaxIndex(arg1, arg2)

def SDA_MinIndex(arg1, arg2):
    return _siglib_wrap.SDA_MinIndex(arg1, arg2)

def SDA_AbsMinIndex(arg1, arg2):
    return _siglib_wrap.SDA_AbsMinIndex(arg1, arg2)

def SDS_Max(arg1, arg2):
    return _siglib_wrap.SDS_Max(arg1, arg2)

def SDS_AbsMax(arg1, arg2):
    return _siglib_wrap.SDS_AbsMax(arg1, arg2)

def SDS_Min(arg1, arg2):
    return _siglib_wrap.SDS_Min(arg1, arg2)

def SDS_AbsMin(arg1, arg2):
    return _siglib_wrap.SDS_AbsMin(arg1, arg2)

def SDA_LocalMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalMax(arg1, arg2, arg3, arg4)

def SDA_LocalAbsMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalAbsMax(arg1, arg2, arg3, arg4)

def SDA_LocalMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalMin(arg1, arg2, arg3, arg4)

def SDA_LocalAbsMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalAbsMin(arg1, arg2, arg3, arg4)

def SDA_Max2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Max2(arg1, arg2, arg3, arg4)

def SDA_AbsMax2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_AbsMax2(arg1, arg2, arg3, arg4)

def SDA_SignedAbsMax2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SignedAbsMax2(arg1, arg2, arg3, arg4)

def SDA_Min2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Min2(arg1, arg2, arg3, arg4)

def SDA_AbsMin2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_AbsMin2(arg1, arg2, arg3, arg4)

def SDA_SignedAbsMin2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SignedAbsMin2(arg1, arg2, arg3, arg4)

def SDA_PeakHold(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_PeakHold(arg1, arg2, arg3, arg4, arg5)

def SDA_PeakHoldPerSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PeakHoldPerSample(arg1, arg2, arg3, arg4)

def SDA_DetectFirstPeakOverThreshold(arg1, arg2, arg3):
    return _siglib_wrap.SDA_DetectFirstPeakOverThreshold(arg1, arg2, arg3)

def SDS_Round(arg1, arg2):
    return _siglib_wrap.SDS_Round(arg1, arg2)

def SDA_Round(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Round(arg1, arg2, arg3, arg4)

def SDS_Clip(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Clip(arg1, arg2, arg3)

def SDA_Clip(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Clip(arg1, arg2, arg3, arg4, arg5)

def SDS_Threshold(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Threshold(arg1, arg2, arg3)

def SDA_Threshold(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Threshold(arg1, arg2, arg3, arg4, arg5)

def SDS_SoftThreshold(arg1, arg2):
    return _siglib_wrap.SDS_SoftThreshold(arg1, arg2)

def SDA_SoftThreshold(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SoftThreshold(arg1, arg2, arg3, arg4)

def SDS_ThresholdAndClamp(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_ThresholdAndClamp(arg1, arg2, arg3, arg4)

def SDA_ThresholdAndClamp(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ThresholdAndClamp(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_Clamp(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Clamp(arg1, arg2, arg3, arg4)

def SDA_Clamp(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Clamp(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_TestOverThreshold(arg1, arg2, arg3):
    return _siglib_wrap.SDA_TestOverThreshold(arg1, arg2, arg3)

def SDA_TestAbsOverThreshold(arg1, arg2, arg3):
    return _siglib_wrap.SDA_TestAbsOverThreshold(arg1, arg2, arg3)

def SDA_SelectMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SelectMax(arg1, arg2, arg3, arg4)

def SDA_SelectMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SelectMin(arg1, arg2, arg3, arg4)

def SDA_SelectMagnitudeSquaredMax(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_SelectMagnitudeSquaredMax(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_SelectMagnitudeSquaredMin(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_SelectMagnitudeSquaredMin(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_SetMinValue(src, arg2):
    return _siglib_wrap.SDS_SetMinValue(src, arg2)

def SDA_SetMinValue(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SetMinValue(arg1, arg2, arg3, arg4)

def SDA_PeakToAverageRatio(arg1, arg2):
    return _siglib_wrap.SDA_PeakToAverageRatio(arg1, arg2)

def SDA_PeakToAveragePowerRatio(arg1, arg2):
    return _siglib_wrap.SDA_PeakToAveragePowerRatio(arg1, arg2)

def SDA_PeakToAveragePowerRatioDB(arg1, arg2):
    return _siglib_wrap.SDA_PeakToAveragePowerRatioDB(arg1, arg2)

def SDA_PeakToAverageRatioComplex(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PeakToAverageRatioComplex(arg1, arg2, arg3)

def SDA_PeakToAveragePowerRatioComplex(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PeakToAveragePowerRatioComplex(arg1, arg2, arg3)

def SDA_PeakToAveragePowerRatioComplexDB(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PeakToAveragePowerRatioComplexDB(arg1, arg2, arg3)

def SDA_MovePeakTowardsDeadBand(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MovePeakTowardsDeadBand(arg1, arg2, arg3, arg4, arg5)

def SIF_Envelope(arg1):
    return _siglib_wrap.SIF_Envelope(arg1)

def SDS_Envelope(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Envelope(arg1, arg2, arg3, arg4)

def SDA_Envelope(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Envelope(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_EnvelopeRMS(arg1):
    return _siglib_wrap.SIF_EnvelopeRMS(arg1)

def SDS_EnvelopeRMS(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_EnvelopeRMS(arg1, arg2, arg3, arg4)

def SDA_EnvelopeRMS(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_EnvelopeRMS(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SDA_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SDS_InterpolateThreePointQuadraticVertexMagnitude(arg1, arg2, arg3):
    return _siglib_wrap.SDS_InterpolateThreePointQuadraticVertexMagnitude(arg1, arg2, arg3)

def SDS_InterpolateThreePointQuadraticVertexLocation(arg1, arg2, arg3):
    return _siglib_wrap.SDS_InterpolateThreePointQuadraticVertexLocation(arg1, arg2, arg3)

def SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_InterpolateThreePointQuadraticVertexMagnitude(arg1):
    return _siglib_wrap.SDA_InterpolateThreePointQuadraticVertexMagnitude(arg1)

def SDA_InterpolateThreePointQuadraticVertexLocation(arg1):
    return _siglib_wrap.SDA_InterpolateThreePointQuadraticVertexLocation(arg1)

def SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2):
    return _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2)

def SDA_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2):
    return _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2)

def SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude(arg1, arg2):
    return _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude(arg1, arg2)

def SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation(arg1, arg2):
    return _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation(arg1, arg2)

def SDA_FirstMinVertex(arg1, arg2):
    return _siglib_wrap.SDA_FirstMinVertex(arg1, arg2)

def SDA_FirstMinVertexPos(arg1, arg2):
    return _siglib_wrap.SDA_FirstMinVertexPos(arg1, arg2)

def SDA_FirstMaxVertex(arg1, arg2):
    return _siglib_wrap.SDA_FirstMaxVertex(arg1, arg2)

def SDA_FirstMaxVertexPos(arg1, arg2):
    return _siglib_wrap.SDA_FirstMaxVertexPos(arg1, arg2)

def SDA_NLargest(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_NLargest(arg1, arg2, arg3, arg4)

def SDA_NSmallest(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_NSmallest(arg1, arg2, arg3, arg4)

def SDA_Divide(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Divide(arg1, arg2, arg3, arg4)

def SDA_Divide2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Divide2(arg1, arg2, arg3, arg4)

def SDA_Multiply(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Multiply(arg1, arg2, arg3, arg4)

def SDA_Multiply2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Multiply2(arg1, arg2, arg3, arg4)

def SDS_ComplexMultiply(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_ComplexMultiply(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_ComplexInverse(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_ComplexInverse(arg1, arg2, arg3, arg4)

def SDA_ComplexInverse(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ComplexInverse(arg1, arg2, arg3, arg4, arg5)

def SDS_ComplexDivide(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_ComplexDivide(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ComplexScalarMultiply(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ComplexScalarMultiply(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ComplexMultiply2(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ComplexMultiply2(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_ComplexScalarDivide(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ComplexScalarDivide(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ComplexDivide2(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ComplexDivide2(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_RealDotProduct(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RealDotProduct(arg1, arg2, arg3)

def SDA_ComplexDotProduct(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ComplexDotProduct(arg1, arg2, arg3, arg4, arg5)

def SDA_SumAndDifference(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SumAndDifference(arg1, arg2, arg3, arg4, arg5)

def SDA_Add2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Add2(arg1, arg2, arg3, arg4)

def SDA_Add3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Add3(arg1, arg2, arg3, arg4, arg5)

def SDA_Add4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Add4(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_Add5(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Add5(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_WeightedSum(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_WeightedSum(arg1, arg2, arg3, arg4, arg5)

def SDA_Subtract2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Subtract2(arg1, arg2, arg3, arg4)

def SDA_Add(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Add(arg1, arg2, arg3, arg4)

def SDA_PositiveOffset(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PositiveOffset(arg1, arg2, arg3)

def SDA_NegativeOffset(arg1, arg2, arg3):
    return _siglib_wrap.SDA_NegativeOffset(arg1, arg2, arg3)

def SDA_Negate(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Negate(arg1, arg2, arg3)

def SDA_Inverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Inverse(arg1, arg2, arg3)

def SDA_Square(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Square(arg1, arg2, arg3)

def SDA_Sqrt(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sqrt(arg1, arg2, arg3)

def SDA_Difference(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Difference(arg1, arg2, arg3, arg4)

def SDA_SumOfDifferences(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SumOfDifferences(arg1, arg2, arg3)

def SDS_Roots(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Roots(arg1, arg2, arg3, arg4, arg5)

def SDS_Factorial(arg1):
    return _siglib_wrap.SDS_Factorial(arg1)

def SDS_Permutations(n, k):
    return _siglib_wrap.SDS_Permutations(n, k)

def SDS_Combinations(n, k):
    return _siglib_wrap.SDS_Combinations(n, k)

def SIF_OverlapAndAddLinear(arg1, arg2):
    return _siglib_wrap.SIF_OverlapAndAddLinear(arg1, arg2)

def SDA_OverlapAndAddLinear(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OverlapAndAddLinear(arg1, arg2, arg3, arg4, arg5)

def SDA_OverlapAndAddLinearWithClip(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_OverlapAndAddLinearWithClip(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_OverlapAndAddArbitrary(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OverlapAndAddArbitrary(arg1, arg2, arg3, arg4, arg5)

def SDA_OverlapAndAddArbitraryWithClip(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_OverlapAndAddArbitraryWithClip(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_DegreesToRadians(arg1):
    return _siglib_wrap.SDS_DegreesToRadians(arg1)

def SDA_DegreesToRadians(arg1, arg2, arg3):
    return _siglib_wrap.SDA_DegreesToRadians(arg1, arg2, arg3)

def SDS_RadiansToDegrees(arg1):
    return _siglib_wrap.SDS_RadiansToDegrees(arg1)

def SDA_RadiansToDegrees(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RadiansToDegrees(arg1, arg2, arg3)

def SDS_DetectNAN(arg1):
    return _siglib_wrap.SDS_DetectNAN(arg1)

def SDA_DetectNAN(arg1, arg2):
    return _siglib_wrap.SDA_DetectNAN(arg1, arg2)

def SDA_Rotate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Rotate(arg1, arg2, arg3, arg4)

def SDA_Reverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Reverse(arg1, arg2, arg3)

def SDA_Scale(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Scale(arg1, arg2, arg3, arg4)

def SDA_MeanSquare(arg1, arg2):
    return _siglib_wrap.SDA_MeanSquare(arg1, arg2)

def SDA_MeanSquareError(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_MeanSquareError(arg1, arg2, arg3, arg4)

def SDA_RootMeanSquare(arg1, arg2):
    return _siglib_wrap.SDA_RootMeanSquare(arg1, arg2)

def SDA_Magnitude(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Magnitude(arg1, arg2, arg3, arg4)

def SDA_MagnitudeSquared(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_MagnitudeSquared(arg1, arg2, arg3, arg4)

def SDS_Magnitude(arg1, arg2):
    return _siglib_wrap.SDS_Magnitude(arg1, arg2)

def SDS_MagnitudeSquared(arg1, arg2):
    return _siglib_wrap.SDS_MagnitudeSquared(arg1, arg2)

def SDS_Phase(arg1, arg2):
    return _siglib_wrap.SDS_Phase(arg1, arg2)

def SDA_PhaseWrapped(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PhaseWrapped(arg1, arg2, arg3, arg4)

def SDA_PhaseUnWrapped(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PhaseUnWrapped(arg1, arg2, arg3, arg4)

def SDA_MagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5)

def SDA_MagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5)

def SDA_MagnitudeSquaredAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeSquaredAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5)

def SDA_MagnitudeSquaredAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeSquaredAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5)

def SDA_PhaseWrap(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PhaseWrap(arg1, arg2, arg3)

def SDA_PhaseUnWrap(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PhaseUnWrap(arg1, arg2, arg3)

def SDS_Log2(arg1):
    return _siglib_wrap.SDS_Log2(arg1)

def SDA_Log2(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Log2(arg1, arg2, arg3)

def SDS_LogN(arg1, arg2):
    return _siglib_wrap.SDS_LogN(arg1, arg2)

def SDA_LogN(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LogN(arg1, arg2, arg3, arg4)

def SDA_LogDistribution(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LogDistribution(arg1, arg2, arg3, arg4)

def SDA_Copy(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Copy(arg1, arg2, arg3)

def SDA_CopyWithStride(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_CopyWithStride(arg1, arg2, arg3, arg4, arg5)

def SIF_CopyWithOverlap(arg1):
    return _siglib_wrap.SIF_CopyWithOverlap(arg1)

def SDA_CopyWithOverlap(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CopyWithOverlap(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SIF_CopyWithIndex(arg1):
    return _siglib_wrap.SIF_CopyWithIndex(arg1)

def SDA_CopyWithIndex(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CopyWithIndex(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_20Log10(arg1, arg2, arg3):
    return _siglib_wrap.SDA_20Log10(arg1, arg2, arg3)

def SDA_10Log10(arg1, arg2, arg3):
    return _siglib_wrap.SDA_10Log10(arg1, arg2, arg3)

def SDA_LogMagnitude(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LogMagnitude(arg1, arg2, arg3, arg4)

def SDA_LogMagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_LogMagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5)

def SDA_LogMagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_LogMagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5)

def SIF_ReSize(arg1):
    return _siglib_wrap.SIF_ReSize(arg1)

def SDA_ReSize(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ReSize(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ReSizeInput(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ReSizeInput(arg1, arg2, arg3, arg4)

def SDA_ReSizeOutput(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ReSizeOutput(arg1, arg2, arg3, arg4)

def SDA_Fill(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Fill(arg1, arg2, arg3)

def SDA_Clear(arg1, arg2):
    return _siglib_wrap.SDA_Clear(arg1, arg2)

def SDA_Histogram(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Histogram(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_HistogramCumulative(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_HistogramCumulative(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_HistogramExtended(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_HistogramExtended(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_HistogramExtendedCumulative(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_HistogramExtendedCumulative(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_Histogram(arg1, arg2):
    return _siglib_wrap.SIF_Histogram(arg1, arg2)

def SDA_HistogramEqualize(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_HistogramEqualize(arg1, arg2, arg3, arg4)

def SDA_Quantize(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Quantize(arg1, arg2, arg3, arg4, arg5)

def SDS_Quantize(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Quantize(arg1, arg2, arg3)

def SDA_Quantize_N(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Quantize_N(arg1, arg2, arg3, arg4)

def SDS_Quantise_N(arg1, arg2):
    return _siglib_wrap.SDS_Quantise_N(arg1, arg2)

def SDA_Abs(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Abs(arg1, arg2, arg3)

def SDS_PeakValueToBits(arg1, arg2):
    return _siglib_wrap.SDS_PeakValueToBits(arg1, arg2)

def SDS_BitsToPeakValue(arg1, arg2):
    return _siglib_wrap.SDS_BitsToPeakValue(arg1, arg2)

def SDS_VoltageTodBm(arg1, arg2):
    return _siglib_wrap.SDS_VoltageTodBm(arg1, arg2)

def SDA_VoltageTodBm(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_VoltageTodBm(arg1, arg2, arg3, arg4)

def SDS_dBmToVoltage(arg1, arg2):
    return _siglib_wrap.SDS_dBmToVoltage(arg1, arg2)

def SDA_dBmToVoltage(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_dBmToVoltage(arg1, arg2, arg3, arg4)

def SDS_VoltageTodB(arg1):
    return _siglib_wrap.SDS_VoltageTodB(arg1)

def SDA_VoltageTodB(arg1, arg2, arg3):
    return _siglib_wrap.SDA_VoltageTodB(arg1, arg2, arg3)

def SDS_dBToVoltage(arg1):
    return _siglib_wrap.SDS_dBToVoltage(arg1)

def SDA_dBToVoltage(arg1, arg2, arg3):
    return _siglib_wrap.SDA_dBToVoltage(arg1, arg2, arg3)

def SDS_PowerTodB(arg1):
    return _siglib_wrap.SDS_PowerTodB(arg1)

def SDA_PowerTodB(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowerTodB(arg1, arg2, arg3)

def SDS_dBToPower(arg1):
    return _siglib_wrap.SDS_dBToPower(arg1)

def SDA_dBToPower(arg1, arg2, arg3):
    return _siglib_wrap.SDA_dBToPower(arg1, arg2, arg3)

def SDS_Compare(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Compare(arg1, arg2, arg3)

def SDA_Compare(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Compare(arg1, arg2, arg3, arg4)

def SDS_CompareComplex(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_CompareComplex(arg1, arg2, arg3, arg4, arg5)

def SDA_CompareComplex(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CompareComplex(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_Int(arg1):
    return _siglib_wrap.SDS_Int(arg1)

def SDS_Frac(arg1):
    return _siglib_wrap.SDS_Frac(arg1)

def SDS_AbsFrac(arg1):
    return _siglib_wrap.SDS_AbsFrac(arg1)

def SDA_Int(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Int(arg1, arg2, arg3)

def SDA_Frac(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Frac(arg1, arg2, arg3)

def SDA_AbsFrac(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AbsFrac(arg1, arg2, arg3)

def SDA_SetMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SetMin(arg1, arg2, arg3, arg4)

def SDA_SetMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SetMax(arg1, arg2, arg3, arg4)

def SDA_SetRange(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SetRange(arg1, arg2, arg3, arg4, arg5)

def SDA_SetMean(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SetMean(arg1, arg2, arg3, arg4, arg5)

def SDA_RealSpectralInverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RealSpectralInverse(arg1, arg2, arg3)

def SDA_ComplexSpectralInverse(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ComplexSpectralInverse(arg1, arg2, arg3, arg4, arg5)

def SDA_FdInterpolate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FdInterpolate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_FdInterpolate2(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FdInterpolate2(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDS_EchoGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_EchoGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Power(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Power(arg1, arg2, arg3, arg4)

def SDS_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDS_Modulo(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Modulo(arg1, arg2, arg3)

def SDA_Modulo(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Modulo(arg1, arg2, arg3, arg4, arg5)

def SDA_AgcPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_AgcPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def SIF_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SIF_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SIF_AgcEnvelopeDetector(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_AgcEnvelopeDetector(arg1, arg2, arg3, arg4, arg5)

def SDS_AgcEnvelopeDetector(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDS_AgcEnvelopeDetector(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_AgcEnvelopeDetector(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SDA_AgcEnvelopeDetector(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SIF_Drc(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Drc(arg1, arg2, arg3, arg4)

def SDS_Drc(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_Drc(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Drc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Drc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SDA_GroupDelay(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_GroupDelay(arg1, arg2, arg3, arg4)

def SDA_ZeroCrossingDetect(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ZeroCrossingDetect(arg1, arg2, arg3, arg4, arg5)

def SDS_ZeroCrossingDetect(arg1, arg2, arg3):
    return _siglib_wrap.SDS_ZeroCrossingDetect(arg1, arg2, arg3)

def SDA_FirstZeroCrossingLocation(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FirstZeroCrossingLocation(arg1, arg2, arg3, arg4)

def SDA_ZeroCrossingCount(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ZeroCrossingCount(arg1, arg2, arg3, arg4)

def SDA_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4, arg5, arg6)

def SDS_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4):
    return _siglib_wrap.SDS_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4)

def SDA_FirstLevelCrossingLocation(arg1, DetectionLevel, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FirstLevelCrossingLocation(arg1, DetectionLevel, arg3, arg4, arg5)

def SDA_LevelCrossingCount(arg1, DetectionLevel, arg3, arg4, arg5):
    return _siglib_wrap.SDA_LevelCrossingCount(arg1, DetectionLevel, arg3, arg4, arg5)

def SDA_Trigger(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Trigger(arg1, arg2, arg3, arg4, arg5)

def SDA_ClearLocation(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ClearLocation(arg1, arg2, arg3)

def SDA_SetLocation(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SetLocation(arg1, arg2, arg3, arg4)

def SDA_SortMinToMax(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SortMinToMax(arg1, arg2, arg3)

def SDA_SortMaxToMin(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SortMaxToMin(arg1, arg2, arg3)

def SDA_SortMinToMax2(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SortMinToMax2(arg1, arg2, arg3, arg4, arg5)

def SDA_SortMaxToMin2(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SortMaxToMin2(arg1, arg2, arg3, arg4, arg5)

def SDA_SortIndexed(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SortIndexed(arg1, arg2, arg3, arg4)

def SDS_CountOneBits(arg1):
    return _siglib_wrap.SDS_CountOneBits(arg1)

def SDS_CountZeroBits(arg1):
    return _siglib_wrap.SDS_CountZeroBits(arg1)

def SDS_CountLeadingOneBits(arg1):
    return _siglib_wrap.SDS_CountLeadingOneBits(arg1)

def SDS_CountLeadingZeroBits(arg1):
    return _siglib_wrap.SDS_CountLeadingZeroBits(arg1)

def SDA_Sign(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sign(arg1, arg2, arg3)

def SDA_Swap(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Swap(arg1, arg2, arg3)

def SUF_ModuloIncrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_ModuloIncrement(arg1, arg2, arg3)

def SUF_ModuloDecrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_ModuloDecrement(arg1, arg2, arg3)

def SUF_IndexModuloIncrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_IndexModuloIncrement(arg1, arg2, arg3)

def SUF_IndexModuloDecrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_IndexModuloDecrement(arg1, arg2, arg3)

def SDA_Find(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Find(arg1, arg2, arg3, arg4, arg5)

def SDA_FindValue(arg1, DesiredValue, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FindValue(arg1, DesiredValue, arg3, arg4, arg5, arg6)

def SIF_DeGlitch(arg1, arg2, arg3):
    return _siglib_wrap.SIF_DeGlitch(arg1, arg2, arg3)

def SDS_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SDA_RemoveDuplicates(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RemoveDuplicates(arg1, arg2, arg3)

def SDA_FindAllDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindAllDuplicates(arg1, arg2, arg3, arg4, arg5)

def SDA_FindFirstDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindFirstDuplicates(arg1, arg2, arg3, arg4, arg5)

def SDA_FindSortAllDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindSortAllDuplicates(arg1, arg2, arg3, arg4, arg5)

def SDA_FindSortFirstDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindSortFirstDuplicates(arg1, arg2, arg3, arg4, arg5)

def SDA_Shuffle(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Shuffle(arg1, arg2, arg3)

def SDA_InsertSample(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_InsertSample(arg1, arg2, arg3, arg4, arg5)

def SDA_InsertArray(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_InsertArray(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ExtractSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractSample(arg1, arg2, arg3, arg4)

def SDA_ExtractArray(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ExtractArray(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_SigLibDataToFix(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToFix(arg1, arg2, arg3)

def SDA_FixToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FixToSigLibData(arg1, arg2, arg3)

def SDA_SigLibDataToImageData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToImageData(arg1, arg2, arg3)

def SDA_ImageDataToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ImageDataToSigLibData(arg1, arg2, arg3)

def SDA_SigLibDataToFix16(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToFix16(arg1, arg2, arg3)

def SDA_Fix16ToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Fix16ToSigLibData(arg1, arg2, arg3)

def SDA_SigLibDataToFix32(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToFix32(arg1, arg2, arg3)

def SDA_Fix32ToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Fix32ToSigLibData(arg1, arg2, arg3)

def SDS_SigLibDataToQFormatInteger(x, arg2, arg3):
    return _siglib_wrap.SDS_SigLibDataToQFormatInteger(x, arg2, arg3)

def SDS_QFormatIntegerToSigLibData(arg1, arg2):
    return _siglib_wrap.SDS_QFormatIntegerToSigLibData(arg1, arg2)

def SDA_SigLibDataToQFormatInteger(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SigLibDataToQFormatInteger(arg1, arg2, arg3, arg4, arg5)

def SDA_QFormatIntegerToSigLibData(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_QFormatIntegerToSigLibData(arg1, arg2, arg3, arg4)

def SDS_Pid(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_Pid(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Pwm(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Pwm(arg1, arg2, arg3, arg4, arg5, arg6)

def SDA_ExtractOrder(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ExtractOrder(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_SumLevel(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SumLevel(arg1, arg2, arg3, arg4)

def SDA_SumLevelWholeSpectrum(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SumLevelWholeSpectrum(arg1, arg2, arg3, arg4, arg5)

def SIF_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SIF_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def SDA_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26):
    return _siglib_wrap.SDA_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26)

def SDA_Sum(arg1, arg2):
    return _siglib_wrap.SDA_Sum(arg1, arg2)

def SDA_AbsSum(arg1, arg2):
    return _siglib_wrap.SDA_AbsSum(arg1, arg2)

def SDA_SumOfSquares(arg1, arg2):
    return _siglib_wrap.SDA_SumOfSquares(arg1, arg2)

def SDA_Mean(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Mean(arg1, arg2, arg3)

def SDA_AbsMean(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AbsMean(arg1, arg2, arg3)

def SDA_SubtractMean(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SubtractMean(arg1, arg2, arg3, arg4)

def SDA_SubtractMax(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SubtractMax(arg1, arg2, arg3)

def SDA_SampleSd(arg1, arg2):
    return _siglib_wrap.SDA_SampleSd(arg1, arg2)

def SDA_PopulationSd(arg1, arg2):
    return _siglib_wrap.SDA_PopulationSd(arg1, arg2)

def SDA_SampleVariance(arg1, arg2):
    return _siglib_wrap.SDA_SampleVariance(arg1, arg2)

def SDA_PopulationVariance(arg1, arg2):
    return _siglib_wrap.SDA_PopulationVariance(arg1, arg2)

def SDA_CovarianceMatrix(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CovarianceMatrix(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDA_Median(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Median(arg1, arg2, arg3)

def SDA_LinraConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LinraConstantCoeff(arg1, arg2, arg3)

def SDA_LinraRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LinraRegressionCoeff(arg1, arg2, arg3)

def SDA_LinraCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LinraCorrelationCoeff(arg1, arg2, arg3)

def SDA_LinraEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LinraEstimateX(arg1, arg2, arg3, arg4)

def SDA_LinraEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LinraEstimateY(arg1, arg2, arg3, arg4)

def SDA_LograConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LograConstantCoeff(arg1, arg2, arg3)

def SDA_LograRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LograRegressionCoeff(arg1, arg2, arg3)

def SDA_LograCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LograCorrelationCoeff(arg1, arg2, arg3)

def SDA_LograEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LograEstimateX(arg1, arg2, arg3, arg4)

def SDA_LograEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LograEstimateY(arg1, arg2, arg3, arg4)

def SDA_ExpraConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ExpraConstantCoeff(arg1, arg2, arg3)

def SDA_ExpraRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ExpraRegressionCoeff(arg1, arg2, arg3)

def SDA_ExpraCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ExpraCorrelationCoeff(arg1, arg2, arg3)

def SDA_ExpraEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExpraEstimateX(arg1, arg2, arg3, arg4)

def SDA_ExpraEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExpraEstimateY(arg1, arg2, arg3, arg4)

def SDA_PowraConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowraConstantCoeff(arg1, arg2, arg3)

def SDA_PowraRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowraRegressionCoeff(arg1, arg2, arg3)

def SDA_PowraCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowraCorrelationCoeff(arg1, arg2, arg3)

def SDA_PowraEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PowraEstimateX(arg1, arg2, arg3, arg4)

def SDA_PowraEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PowraEstimateY(arg1, arg2, arg3, arg4)

def SDA_Detrend(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Detrend(arg1, arg2, arg3, arg4)

def SDA_ExtractTrend(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractTrend(arg1, arg2, arg3, arg4)

def SDA_Sin(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sin(arg1, arg2, arg3)

def SDA_Cos(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Cos(arg1, arg2, arg3)

def SDA_Tan(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Tan(arg1, arg2, arg3)

def SIF_FastSin(arg1, arg2):
    return _siglib_wrap.SIF_FastSin(arg1, arg2)

def SDA_FastSin(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FastSin(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_FastSin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FastSin(arg1, arg2, arg3, arg4)

def SIF_FastCos(arg1, arg2):
    return _siglib_wrap.SIF_FastCos(arg1, arg2)

def SDA_FastCos(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FastCos(arg1, arg2, arg3, arg4, arg5, arg6)

def SDS_FastCos(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FastCos(arg1, arg2, arg3, arg4)

def SIF_FastSinCos(arg1, arg2):
    return _siglib_wrap.SIF_FastSinCos(arg1, arg2)

def SDA_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_QuickSin(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickSin(arg1, arg2, arg3)

def SDA_QuickSin(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickSin(arg1, arg2, arg3, arg4, arg5)

def SDS_QuickSin(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickSin(arg1, arg2, arg3)

def SIF_QuickCos(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickCos(arg1, arg2, arg3)

def SDA_QuickCos(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickCos(arg1, arg2, arg3, arg4, arg5)

def SDS_QuickCos(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickCos(arg1, arg2, arg3)

def SIF_QuickSinCos(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickSinCos(arg1, arg2, arg3)

def SDA_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SDS_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6)

def SIF_QuickTan(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickTan(arg1, arg2, arg3)

def SDA_QuickTan(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickTan(arg1, arg2, arg3, arg4, arg5)

def SDS_QuickTan(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickTan(arg1, arg2, arg3)

def SDA_Sinc(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sinc(arg1, arg2, arg3)

def SDS_Sinc(arg1):
    return _siglib_wrap.SDS_Sinc(arg1)

def SIF_QuickSinc(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_QuickSinc(arg1, arg2, arg3, arg4)

def SDA_QuickSinc(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickSinc(arg1, arg2, arg3, arg4, arg5)

def SDS_QuickSinc(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickSinc(arg1, arg2, arg3)

def SCV_Polar(arg1, arg2):
    return _siglib_wrap.SCV_Polar(arg1, arg2)

def SCV_Rectangular(arg1, arg2):
    return _siglib_wrap.SCV_Rectangular(arg1, arg2)

def SCV_PolarToRectangular(arg1):
    return _siglib_wrap.SCV_PolarToRectangular(arg1)

def SCV_RectangularToPolar(arg1):
    return _siglib_wrap.SCV_RectangularToPolar(arg1)

def SCV_Sqrt(arg1):
    return _siglib_wrap.SCV_Sqrt(arg1)

def SCV_Inverse(arg1):
    return _siglib_wrap.SCV_Inverse(arg1)

def SCV_Conjugate(arg1):
    return _siglib_wrap.SCV_Conjugate(arg1)

def SCV_Magnitude(arg1):
    return _siglib_wrap.SCV_Magnitude(arg1)

def SCV_MagnitudeSquared(arg1):
    return _siglib_wrap.SCV_MagnitudeSquared(arg1)

def SCV_Phase(arg1):
    return _siglib_wrap.SCV_Phase(arg1)

def SCV_Multiply(arg1, arg2):
    return _siglib_wrap.SCV_Multiply(arg1, arg2)

def SCV_Divide(arg1, arg2):
    return _siglib_wrap.SCV_Divide(arg1, arg2)

def SCV_Add(arg1, arg2):
    return _siglib_wrap.SCV_Add(arg1, arg2)

def SCV_Subtract(arg1, arg2):
    return _siglib_wrap.SCV_Subtract(arg1, arg2)

def SCV_Log(arg1):
    return _siglib_wrap.SCV_Log(arg1)

def SCV_Exp(arg1):
    return _siglib_wrap.SCV_Exp(arg1)

def SCV_Expj(arg1):
    return _siglib_wrap.SCV_Expj(arg1)

def SCV_Pow(arg1, arg2):
    return _siglib_wrap.SCV_Pow(arg1, arg2)

def SCV_VectorAddScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorAddScalar(arg1, arg2)

def SCV_VectorSubtractScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorSubtractScalar(arg1, arg2)

def SCV_VectorMultiplyScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorMultiplyScalar(arg1, arg2)

def SCV_VectorDivideScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorDivideScalar(arg1, arg2)

def SCV_ScalarSubtractVector(arg1, arg2):
    return _siglib_wrap.SCV_ScalarSubtractVector(arg1, arg2)

def SCV_Roots(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SCV_Roots(arg1, arg2, arg3, arg4, arg5)

def SCV_Copy(arg1):
    return _siglib_wrap.SCV_Copy(arg1)

def SCV_Compare(arg1, arg2):
    return _siglib_wrap.SCV_Compare(arg1, arg2)

def SDA_CreateComplexRect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_CreateComplexRect(arg1, arg2, arg3, arg4)

def SDA_CreateComplexPolar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_CreateComplexPolar(arg1, arg2, arg3, arg4)

def SDA_ExtractComplexRect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractComplexRect(arg1, arg2, arg3, arg4)

def SDA_ExtractComplexPolar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractComplexPolar(arg1, arg2, arg3, arg4)

def SDA_ClearComplexRect(arg1, arg2):
    return _siglib_wrap.SDA_ClearComplexRect(arg1, arg2)

def SDA_ClearComplexPolar(arg1, arg2):
    return _siglib_wrap.SDA_ClearComplexPolar(arg1, arg2)

def SDA_FillComplexRect(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FillComplexRect(arg1, arg2, arg3)

def SDA_FillComplexPolar(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FillComplexPolar(arg1, arg2, arg3)

def SDA_ComplexRectangularToPolar(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectangularToPolar(arg1, arg2, arg3)

def SDA_ComplexPolarToRectangular(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexPolarToRectangular(arg1, arg2, arg3)

def SDA_RectangularToPolar(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_RectangularToPolar(arg1, arg2, arg3, arg4, arg5)

def SDA_PolarToRectangular(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_PolarToRectangular(arg1, arg2, arg3, arg4, arg5)

def SDA_ComplexRectSqrt(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectSqrt(arg1, arg2, arg3)

def SDA_ComplexRectInverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectInverse(arg1, arg2, arg3)

def SDA_ComplexRectConjugate(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectConjugate(arg1, arg2, arg3)

def SDA_ComplexRectMagnitude(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectMagnitude(arg1, arg2, arg3)

def SDA_ComplexRectMagnitudeSquared(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectMagnitudeSquared(arg1, arg2, arg3)

def SDA_ComplexRectPhase(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectPhase(arg1, arg2, arg3)

def SDA_ComplexRectMultiply(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectMultiply(arg1, arg2, arg3, arg4)

def SDA_ComplexRectDivide(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectDivide(arg1, arg2, arg3, arg4)

def SDA_ComplexRectAdd(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectAdd(arg1, arg2, arg3, arg4)

def SDA_ComplexRectSubtract(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectSubtract(arg1, arg2, arg3, arg4)

def SDA_ComplexRectLog(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectLog(arg1, arg2, arg3)

def SDA_ComplexRectExp(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectExp(arg1, arg2, arg3)

def SDA_ComplexRectExpj(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectExpj(arg1, arg2, arg3)

def SDA_ComplexRectPow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectPow(arg1, arg2, arg3, arg4)

def SDA_ComplexRectAddScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectAddScalar(arg1, arg2, arg3, arg4)

def SDA_ComplexRectSubtractScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectSubtractScalar(arg1, arg2, arg3, arg4)

def SDA_ComplexRectMultiplyScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectMultiplyScalar(arg1, arg2, arg3, arg4)

def SDA_ComplexRectDivideScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectDivideScalar(arg1, arg2, arg3, arg4)

def SDA_ComplexScalarSubtractRect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexScalarSubtractRect(arg1, arg2, arg3, arg4)

def SDA_ComplexRectLinearInterpolate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectLinearInterpolate(arg1, arg2, arg3, arg4)

def SDA_ComplexPolarLinearInterpolate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexPolarLinearInterpolate(arg1, arg2, arg3, arg4)

def SMX_Transpose(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Transpose(arg1, arg2, arg3, arg4)

def SMX_Diagonal(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Diagonal(arg1, arg2, arg3, arg4)

def SMX_Multiply(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_Multiply(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_CreateIdentity(arg1, arg2):
    return _siglib_wrap.SMX_CreateIdentity(arg1, arg2)

def SMX_Inverse2x2(arg1, arg2):
    return _siglib_wrap.SMX_Inverse2x2(arg1, arg2)

def SMX_ComplexInverse2x2(arg1, arg2):
    return _siglib_wrap.SMX_ComplexInverse2x2(arg1, arg2)

def SMX_Inverse(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SMX_Inverse(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SMX_LuDecompose(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_LuDecompose(arg1, arg2, arg3, arg4)

def SMX_LuSolve(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_LuSolve(arg1, arg2, arg3, arg4)

def SMX_CholeskyDecompose(arg1, arg2, arg3):
    return _siglib_wrap.SMX_CholeskyDecompose(arg1, arg2, arg3)

def SMX_Determinant(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_Determinant(arg1, arg2, arg3, arg4, arg5)

def SMX_LuDeterminant(arg1, arg2, arg3):
    return _siglib_wrap.SMX_LuDeterminant(arg1, arg2, arg3)

def SMX_RotateClockwise(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_RotateClockwise(arg1, arg2, arg3, arg4)

def SMX_RotateAntiClockwise(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_RotateAntiClockwise(arg1, arg2, arg3, arg4)

def SMX_Reflect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Reflect(arg1, arg2, arg3, arg4)

def SMX_Flip(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Flip(arg1, arg2, arg3, arg4)

def SMX_InsertRow(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertRow(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_ExtractRow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_ExtractRow(arg1, arg2, arg3, arg4)

def SMX_InsertColumn(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertColumn(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_ExtractColumn(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_ExtractColumn(arg1, arg2, arg3, arg4, arg5)

def SMX_InsertNewRow(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertNewRow(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_DeleteOldRow(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_DeleteOldRow(arg1, arg2, arg3, arg4, arg5)

def SMX_InsertNewColumn(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertNewColumn(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_DeleteOldColumn(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_DeleteOldColumn(arg1, arg2, arg3, arg4, arg5)

def SMX_InsertRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SMX_InsertRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def SMX_ExtractRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SMX_ExtractRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def SMX_InsertDiagonal(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_InsertDiagonal(arg1, arg2, arg3, arg4)

def SMX_ExtractDiagonal(arg1, arg2, arg3):
    return _siglib_wrap.SMX_ExtractDiagonal(arg1, arg2, arg3)

def SMX_SwapRows(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_SwapRows(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_SwapColumns(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_SwapColumns(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_Sum(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Sum(arg1, arg2, arg3, arg4)

def SMX_ShuffleColumns(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_ShuffleColumns(arg1, arg2, arg3, arg4, arg5, arg6)

def SMX_ShuffleRows(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_ShuffleRows(arg1, arg2, arg3, arg4, arg5)

def SMX_ExtractCategoricalColumn(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_ExtractCategoricalColumn(arg1, arg2, arg3, arg4)

def SDA_TwoLayer2CategoryNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SDA_TwoLayer2CategoryNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SDA_TwoLayer2CategoryNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_TwoLayer2CategoryNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_TwoLayerNCategoryNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_TwoLayerNCategoryNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SDA_TwoLayerNCategoryNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_TwoLayerNCategoryNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SDA_TwoLayer2CategoryWithBiasesNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_TwoLayer2CategoryWithBiasesNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def SDA_TwoLayer2CategoryWithBiasesNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SDA_TwoLayer2CategoryWithBiasesNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SDA_TwoLayerNCategoryWithBiasesNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_TwoLayerNCategoryWithBiasesNetworkFit(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def SDA_TwoLayerNCategoryWithBiasesNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SDA_TwoLayerNCategoryWithBiasesNetworkPredict(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def SDS_ActivationReLU(arg1):
    return _siglib_wrap.SDS_ActivationReLU(arg1)

def SDA_ActivationReLU(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ActivationReLU(arg1, arg2, arg3)

def SDS_ActivationReLUDerivative(arg1):
    return _siglib_wrap.SDS_ActivationReLUDerivative(arg1)

def SDA_ActivationReLUDerivative(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ActivationReLUDerivative(arg1, arg2, arg3)

def SDS_ActivationLeakyReLU(arg1, arg2):
    return _siglib_wrap.SDS_ActivationLeakyReLU(arg1, arg2)

def SDA_ActivationLeakyReLU(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ActivationLeakyReLU(arg1, arg2, arg3, arg4)

def SDS_ActivationLeakyReLUDerivative(arg1, arg2):
    return _siglib_wrap.SDS_ActivationLeakyReLUDerivative(arg1, arg2)

def SDA_ActivationLeakyReLUDerivative(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ActivationLeakyReLUDerivative(arg1, arg2, arg3, arg4)

def SDS_ActivationLogistic(arg1):
    return _siglib_wrap.SDS_ActivationLogistic(arg1)

def SDA_ActivationLogistic(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ActivationLogistic(arg1, arg2, arg3)

def SDS_ActivationLogisticDerivative(arg1):
    return _siglib_wrap.SDS_ActivationLogisticDerivative(arg1)

def SDA_ActivationLogisticDerivative(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ActivationLogisticDerivative(arg1, arg2, arg3)

def SDS_ActivationTanH(arg1):
    return _siglib_wrap.SDS_ActivationTanH(arg1)

def SDA_ActivationTanH(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ActivationTanH(arg1, arg2, arg3)

def SDS_ActivationTanHDerivative(arg1):
    return _siglib_wrap.SDS_ActivationTanHDerivative(arg1)

def SDA_ActivationTanHDerivative(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ActivationTanHDerivative(arg1, arg2, arg3)


